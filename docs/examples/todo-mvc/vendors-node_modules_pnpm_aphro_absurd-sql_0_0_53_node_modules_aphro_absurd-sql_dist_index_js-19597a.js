/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_aphro_todo_mvc"] = self["webpackChunk_aphro_todo_mvc"] || []).push([["vendors-node_modules_pnpm_aphro_absurd-sql_0_0_53_node_modules_aphro_absurd-sql_dist_index_js-19597a"],{

/***/ "../../node_modules/.pnpm/@aphro+absurd-sql@0.0.53/node_modules/@aphro/absurd-sql/dist/index.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@aphro+absurd-sql@0.0.53/node_modules/@aphro/absurd-sql/dist/index.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SQLiteFS\": () => (/* binding */ SQLiteFS)\n/* harmony export */ });\nconst ERRNO_CODES = {\n  EPERM: 63,\n  ENOENT: 44\n};\n\n// This implements an emscripten-compatible filesystem that is means\n// to be mounted to the one from `sql.js`. Example:\n//\n// let BFS = new SQLiteFS(SQL.FS, idbBackend);\n// SQL.FS.mount(BFS, {}, '/blocked');\n//\n// Now any files created under '/blocked' will be handled by this\n// filesystem, which creates a special file that handles read/writes\n// in the way that we want.\nclass SQLiteFS$1 {\n  constructor(FS, backend) {\n    this.FS = FS;\n    this.backend = backend;\n\n    this.node_ops = {\n      getattr: node => {\n        let fileattr = FS.isFile(node.mode) ? node.contents.getattr() : null;\n\n        let attr = {};\n        attr.dev = 1;\n        attr.ino = node.id;\n        attr.mode = fileattr ? fileattr.mode : node.mode;\n        attr.nlink = 1;\n        attr.uid = 0;\n        attr.gid = 0;\n        attr.rdev = node.rdev;\n        attr.size = fileattr ? fileattr.size : FS.isDir(node.mode) ? 4096 : 0;\n        attr.atime = new Date(0);\n        attr.mtime = new Date(0);\n        attr.ctime = new Date(0);\n        attr.blksize = fileattr ? fileattr.blockSize : 4096;\n        attr.blocks = Math.ceil(attr.size / attr.blksize);\n        return attr;\n      },\n      setattr: (node, attr) => {\n        if (this.FS.isFile(node.mode)) {\n          node.contents.setattr(attr);\n        } else {\n          if (attr.mode != null) {\n            node.mode = attr.mode;\n          }\n          if (attr.size != null) {\n            node.size = attr.size;\n          }\n        }\n      },\n      lookup: (parent, name) => {\n        throw new this.FS.ErrnoError(ERRNO_CODES.ENOENT);\n      },\n      mknod: (parent, name, mode, dev) => {\n        if (name.endsWith('.lock')) {\n          throw new Error('Locking via lockfiles is not supported');\n        }\n\n        return this.createNode(parent, name, mode, dev);\n      },\n      rename: (old_node, new_dir, new_name) => {\n        throw new Error('rename not implemented');\n      },\n      unlink: (parent, name) => {\n        let node = this.FS.lookupNode(parent, name);\n        node.contents.delete(name);\n      },\n      readdir: node => {\n        // We could list all the available databases here if `node` is\n        // the root directory. However Firefox does not implemented\n        // such a methods. Other browsers do, but since it's not\n        // supported on all browsers users will need to track it\n        // separate anyway right now\n\n        throw new Error('readdir not implemented');\n      },\n      symlink: (parent, newname, oldpath) => {\n        throw new Error('symlink not implemented');\n      },\n      readlink: node => {\n        throw new Error('symlink not implemented');\n      }\n    };\n\n    this.stream_ops = {\n      open: stream => {\n        if (this.FS.isFile(stream.node.mode)) {\n          stream.node.contents.open();\n        }\n      },\n\n      close: stream => {\n        if (this.FS.isFile(stream.node.mode)) {\n          stream.node.contents.close();\n        }\n      },\n\n      read: (stream, buffer, offset, length, position) => {\n        // console.log('read', offset, length, position)\n        return stream.node.contents.read(buffer, offset, length, position);\n      },\n\n      write: (stream, buffer, offset, length, position) => {\n        // console.log('write', offset, length, position);\n        return stream.node.contents.write(buffer, offset, length, position);\n      },\n\n      llseek: (stream, offset, whence) => {\n        // Copied from MEMFS\n        var position = offset;\n        if (whence === 1) {\n          position += stream.position;\n        } else if (whence === 2) {\n          if (FS.isFile(stream.node.mode)) {\n            position += stream.node.contents.getattr().size;\n          }\n        }\n        if (position < 0) {\n          throw new this.FS.ErrnoError(28);\n        }\n        return position;\n      },\n      allocate: (stream, offset, length) => {\n        stream.node.contents.setattr({ size: offset + length });\n      },\n      mmap: (stream, address, length, position, prot, flags) => {\n        throw new Error('mmap not implemented');\n      },\n      msync: (stream, buffer, offset, length, mmapFlags) => {\n        throw new Error('msync not implemented');\n      },\n      fsync: (stream, buffer, offset, length, mmapFlags) => {\n        stream.node.contents.fsync();\n      }\n    };\n  }\n\n  mount() {\n    return this.createNode(null, '/', 16384 /* dir */ | 511 /* 0777 */, 0);\n  }\n\n  lock(path, lockType) {\n    let { node } = this.FS.lookupPath(path);\n    return node.contents.lock(lockType);\n  }\n\n  unlock(path, lockType) {\n    let { node } = this.FS.lookupPath(path);\n    return node.contents.unlock(lockType);\n  }\n\n  createNode(parent, name, mode, dev) {\n    // Only files and directories supported\n    if (!(this.FS.isDir(mode) || this.FS.isFile(mode))) {\n      throw new this.FS.ErrnoError(ERRNO_CODES.EPERM);\n    }\n\n    var node = this.FS.createNode(parent, name, mode, dev);\n    if (this.FS.isDir(node.mode)) {\n      node.node_ops = {\n        mknod: this.node_ops.mknod,\n        lookup: this.node_ops.lookup,\n        unlink: this.node_ops.unlink,\n        setattr: this.node_ops.setattr\n      };\n      node.stream_ops = {};\n      node.contents = {};\n    } else if (this.FS.isFile(node.mode)) {\n      node.node_ops = this.node_ops;\n      node.stream_ops = this.stream_ops;\n\n      // Create file!\n      node.contents = this.backend.createFile(name);\n    }\n\n    // add the new node to the parent\n    if (parent) {\n      parent.contents[name] = node;\n      parent.timestamp = node.timestamp;\n    }\n\n    return node;\n  }\n}\n\n// Right now we don't support `export from` so we do this manually\nconst SQLiteFS = SQLiteFS$1;\n\n\n\n\n//# sourceURL=webpack://@aphro/todo-mvc/../../node_modules/.pnpm/@aphro+absurd-sql@0.0.53/node_modules/@aphro/absurd-sql/dist/index.js?");

/***/ }),

/***/ "../../node_modules/.pnpm/@aphro+absurd-sql@0.0.53/node_modules/@aphro/absurd-sql/dist/indexeddb-backend.js":
/*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@aphro+absurd-sql@0.0.53/node_modules/@aphro/absurd-sql/dist/indexeddb-backend.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IndexedDBBackend)\n/* harmony export */ });\nlet LOCK_TYPES = {\n  NONE: 0,\n  SHARED: 1,\n  RESERVED: 2,\n  PENDING: 3,\n  EXCLUSIVE: 4\n};\n\nfunction getPageSize(bufferView) {\n  // See 1.3.2 on https://www.sqlite.org/fileformat.html The page size\n  // is stored as a 2 byte integer at the 16th byte. It's stored as\n  // big-endian so the first byte is the larger one. Combine it into a\n  // single integer.\n  let int1 = bufferView[16];\n  let int2 = bufferView[17];\n  return (int1 << 8) + int2;\n}\n\nfunction isSafeToWrite(localData, diskData) {\n  if (localData != null && diskData != null) {\n    let localView = new Uint8Array(localData);\n    let diskView = new Uint8Array(diskData);\n\n    // See\n    // https://github.com/sqlite/sqlite/blob/master/src/pager.c#L93-L96\n    // (might be documented somewhere? I didn't see it this clearly in\n    // the docs). At least one of these bytes change when sqlite3 writes\n    // data. We can check this against our in-memory data to see if it's\n    // safe to write (if something changes underneath us, it's not)\n    for (let i = 24; i < 40; i++) {\n      if (localView[i] !== diskView[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // One of them is null, so it's only safe if to write if both are\n  // null, otherwise they are different\n  return localData == null && diskData == null;\n}\n\nfunction range(start, end, step) {\n  let r = [];\n  for (let i = start; i <= end; i += step) {\n    r.push(i);\n  }\n  return r;\n}\n\nfunction getBoundaryIndexes(blockSize, start, end) {\n  let startC = start - (start % blockSize);\n  let endC = end - 1 - ((end - 1) % blockSize);\n\n  return range(startC, endC, blockSize);\n}\n\nfunction readChunks(chunks, start, end) {\n  let buffer = new ArrayBuffer(end - start);\n  let bufferView = new Uint8Array(buffer);\n  for (let i = 0; i < chunks.length; i++) {\n    let chunk = chunks[i];\n\n    // TODO: jest has a bug where we can't do `instanceof ArrayBuffer`\n    if (chunk.data.constructor.name !== 'ArrayBuffer') {\n      throw new Error('Chunk data is not an ArrayBuffer');\n    }\n\n    let cstart = 0;\n    let cend = chunk.data.byteLength;\n\n    if (start > chunk.pos) {\n      cstart = start - chunk.pos;\n    }\n    if (end < chunk.pos + chunk.data.byteLength) {\n      cend = end - chunk.pos;\n    }\n\n    if (cstart > chunk.data.byteLength || cend < 0) {\n      continue;\n    }\n\n    let len = cend - cstart;\n\n    bufferView.set(\n      new Uint8Array(chunk.data, cstart, len),\n      chunk.pos - start + cstart\n    );\n  }\n\n  return buffer;\n}\n\nfunction writeChunks(bufferView, blockSize, start, end) {\n  let indexes = getBoundaryIndexes(blockSize, start, end);\n  let cursor = 0;\n\n  return indexes\n    .map(index => {\n      let cstart = 0;\n      let cend = blockSize;\n      if (start > index && start < index + blockSize) {\n        cstart = start - index;\n      }\n      if (end > index && end < index + blockSize) {\n        cend = end - index;\n      }\n\n      let len = cend - cstart;\n      let chunkBuffer = new ArrayBuffer(blockSize);\n\n      if (start > index + blockSize || end <= index) {\n        return null;\n      }\n\n      let off = bufferView.byteOffset + cursor;\n\n      let available = bufferView.buffer.byteLength - off;\n      if (available <= 0) {\n        return null;\n      }\n\n      let readLength = Math.min(len, available);\n\n      new Uint8Array(chunkBuffer).set(\n        new Uint8Array(bufferView.buffer, off, readLength),\n        cstart\n      );\n      cursor += readLength;\n\n      return {\n        pos: index,\n        data: chunkBuffer,\n        offset: cstart,\n        length: readLength\n      };\n    })\n    .filter(Boolean);\n}\n\nclass File {\n  constructor(filename, ops, meta = null) {\n    this.filename = filename;\n    this.buffer = new Map();\n    this.ops = ops;\n    this.meta = meta;\n    this._metaDirty = false;\n    this.writeLock = false;\n    this.openHandles = 0;\n  }\n\n  bufferChunks(chunks) {\n    for (let i = 0; i < chunks.length; i++) {\n      let chunk = chunks[i];\n      this.buffer.set(chunk.pos, chunk);\n    }\n  }\n\n  open() {\n    this.openHandles++;\n\n    // Don't open the file again if it's already open\n    if (this.openHandles === 1) {\n      this.ops.open();\n      let meta = this.ops.readMeta();\n\n      // It's possible that `setattr` has already been called if opening\n      // the file in a mode that truncates it to 0\n      if (this.meta == null) {\n        if (meta == null) {\n          // New file\n\n          meta = { size: 0 };\n        }\n\n        this.meta = meta;\n      }\n    }\n\n    return this.meta;\n  }\n\n  close() {\n    this.fsync();\n\n    this.openHandles = Math.max(this.openHandles - 1, 0);\n\n    // Only close it if there are no existing open handles\n    if (this.openHandles === 0) {\n      this.ops.close();\n    }\n  }\n\n  delete() {\n    this.ops.delete();\n  }\n\n  load(indexes) {\n    let status = indexes.reduce(\n      (acc, b) => {\n        let inMemory = this.buffer.get(b);\n        if (inMemory) {\n          acc.chunks.push(inMemory);\n        } else {\n          acc.missing.push(b);\n        }\n        return acc;\n      },\n      { chunks: [], missing: [] }\n    );\n\n    let missingChunks = [];\n    if (status.missing.length > 0) {\n      missingChunks = this.ops.readBlocks(status.missing, this.meta.blockSize);\n    }\n    return status.chunks.concat(missingChunks);\n  }\n\n  read(bufferView, offset, length, position) {\n    // console.log('reading', this.filename, offset, length, position);\n    let buffer = bufferView.buffer;\n\n    if (length <= 0) {\n      return 0;\n    }\n    if (position < 0) {\n      // TODO: is this right?\n      return 0;\n    }\n    if (position >= this.meta.size) {\n      let view = new Uint8Array(buffer, offset);\n      for (let i = 0; i < length; i++) {\n        view[i] = 0;\n      }\n\n      return length;\n    }\n\n    position = Math.max(position, 0);\n    let dataLength = Math.min(length, this.meta.size - position);\n\n    let start = position;\n    let end = position + dataLength;\n\n    let indexes = getBoundaryIndexes(this.meta.blockSize, start, end);\n\n    let chunks = this.load(indexes);\n    let readBuffer = readChunks(chunks, start, end);\n\n    if (buffer.byteLength - offset < readBuffer.byteLength) {\n      throw new Error('Buffer given to `read` is too small');\n    }\n    let view = new Uint8Array(buffer);\n    view.set(new Uint8Array(readBuffer), offset);\n\n    // TODO: I don't need to do this. `unixRead` does this for us.\n    for (let i = dataLength; i < length; i++) {\n      view[offset + i] = 0;\n    }\n\n    return length;\n  }\n\n  write(bufferView, offset, length, position) {\n    // console.log('writing', this.filename, offset, length, position);\n\n    if (this.meta.blockSize == null) {\n      // We don't have a block size yet (an empty file). The first\n      // write MUST be the beginning of the file. This is a new file\n      // and the first block contains the page size which we need.\n      // sqlite will write this block first, and if you are directly\n      // writing a db file to disk you can't write random parts of it.\n      // Just write the whole thing and we'll get the first block\n      // first.\n\n      let pageSize = getPageSize(\n        new Uint8Array(bufferView.buffer, bufferView.byteOffset + offset)\n      );\n\n      // Page sizes must be a power of 2 between 512 and 65536.\n      // These was generated by doing `Math.pow(2, N)` where N >= 9\n      // and N <= 16.\n      if (\n        ![512, 1024, 2048, 4096, 8192, 16384, 32768, 65536].includes(pageSize)\n      ) {\n        throw new Error(\n          'File has invalid page size. (the first block of a new file must be written first)'\n        );\n      }\n\n      this.setattr({ blockSize: pageSize });\n    }\n\n    let buffer = bufferView.buffer;\n\n    if (length <= 0) {\n      return 0;\n    }\n    if (position < 0) {\n      return 0;\n    }\n    if (buffer.byteLength === 0) {\n      return 0;\n    }\n\n    length = Math.min(length, buffer.byteLength - offset);\n\n    let writes = writeChunks(\n      new Uint8Array(buffer, offset, length),\n      this.meta.blockSize,\n      position,\n      position + length\n    );\n\n    // Find any partial chunks and read them in and merge with\n    // existing data\n    let { partialWrites, fullWrites } = writes.reduce(\n      (state, write) => {\n        if (write.length !== this.meta.blockSize) {\n          state.partialWrites.push(write);\n        } else {\n          state.fullWrites.push({\n            pos: write.pos,\n            data: write.data\n          });\n        }\n        return state;\n      },\n      { fullWrites: [], partialWrites: [] }\n    );\n\n    let reads = [];\n    if (partialWrites.length > 0) {\n      reads = this.load(partialWrites.map(w => w.pos));\n    }\n\n    let allWrites = fullWrites.concat(\n      reads.map(read => {\n        let write = partialWrites.find(w => w.pos === read.pos);\n\n        // MuTatIoN!\n        new Uint8Array(read.data).set(\n          new Uint8Array(write.data, write.offset, write.length),\n          write.offset,\n          write.length\n        );\n\n        return read;\n      })\n    );\n\n    this.bufferChunks(allWrites);\n\n    if (position + length > this.meta.size) {\n      this.setattr({ size: position + length });\n    }\n\n    return length;\n  }\n\n  async readIfFallback() {\n    if (this.ops.readIfFallback) {\n      // Reset the meta\n      let meta = await this.ops.readIfFallback();\n      this.meta = meta || { size: 0 };\n    }\n  }\n\n  lock(lockType) {\n    // TODO: Perf APIs need improvement\n    if (!this._recordingLock) {\n      this._recordingLock = true;\n    }\n\n    if (this.ops.lock(lockType)) {\n      if (lockType >= LOCK_TYPES.RESERVED) {\n        this.writeLock = true;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  unlock(lockType) {\n    if (lockType === 0) {\n      this._recordingLock = false;\n    }\n\n    if (this.writeLock) {\n      // In certain cases (I saw this while running VACUUM after\n      // changing page size) sqlite changes the size of the file\n      // _after_ `fsync` for some reason. In our case, this is\n      // critical because we are relying on fsync to write everything\n      // out. If we just did some writes, do another fsync which will\n      // check the meta and make sure it's persisted if dirty (all\n      // other writes should already be flushed by now)\n      this.fsync();\n      this.writeLock = false;\n    }\n\n    return this.ops.unlock(lockType);\n  }\n\n  fsync() {\n    if (this.buffer.size > 0) {\n      // We need to handle page size changes which restructures the\n      // whole db. We check if the page size is being written and\n      // handle it\n      let first = this.buffer.get(0);\n      if (first) {\n        let pageSize = getPageSize(new Uint8Array(first.data));\n\n        if (pageSize !== this.meta.blockSize) {\n          // The page size changed! We need to reflect that in our\n          // storage. We need to restructure all pending writes and\n          // change our page size so all future writes reflect the new\n          // size.\n          let buffer = this.buffer;\n          this.buffer = new Map();\n\n          // We take all pending writes, concat them into a single\n          // buffer, and rewrite it out with the new size. This would\n          // be dangerous if the page size could be changed at any\n          // point in time since we don't handle partial reads here.\n          // However sqlite only ever actually changes the page size\n          // in 2 cases:\n          //\n          // * The db is empty (no data yet, so nothing to read)\n          // * A VACUUM command is rewriting the entire db\n          //\n          // In both cases, we can assume we have _all_ the needed\n          // data in the pending buffer, and we don't have to worry\n          // about overwriting anything.\n\n          let writes = [...buffer.values()];\n          let totalSize = writes.length * this.meta.blockSize;\n          let buf = new ArrayBuffer(totalSize);\n          let view = new Uint8Array(buf);\n\n          for (let write of writes) {\n            view.set(new Uint8Array(write.data), write.pos);\n          }\n\n          // Rewrite the buffer with the new page size\n          this.bufferChunks(writeChunks(view, pageSize, 0, totalSize));\n\n          // Change our page size\n          this.setattr({ blockSize: pageSize });\n        }\n      }\n\n      this.ops.writeBlocks([...this.buffer.values()], this.meta.blockSize);\n    }\n\n    if (this._metaDirty) {\n      // We only store the size right now. Block size is already\n      // stored in the sqlite file and we don't need the rest\n      //\n      // TODO: Currently we don't delete any extra blocks after the\n      // end of the file. This isn't super important, and in fact\n      // could cause perf regressions (sqlite doesn't compress files\n      // either!) but what we probably should do is detect a VACUUM\n      // command (the whole db is being rewritten) and at that point\n      // delete anything after the end of the file\n      this.ops.writeMeta({ size: this.meta.size });\n      this._metaDirty = false;\n    }\n\n    this.buffer = new Map();\n  }\n\n  setattr(attr) {\n    if (this.meta == null) {\n      this.meta = {};\n    }\n\n    // Size is the only attribute we actually persist. The rest are\n    // stored in memory\n\n    if (attr.mode !== undefined) {\n      this.meta.mode = attr.mode;\n    }\n\n    if (attr.blockSize !== undefined) {\n      this.meta.blockSize = attr.blockSize;\n    }\n\n    if (attr.size !== undefined) {\n      this.meta.size = attr.size;\n      this._metaDirty = true;\n    }\n  }\n\n  getattr() {\n    return this.meta;\n  }\n}\n\nlet FINALIZED = 0xdeadbeef;\n\nlet WRITEABLE = 0;\nlet READABLE = 1;\n\nclass Reader {\n  constructor(\n    buffer,\n    { initialOffset = 4, useAtomics = true, stream = true, debug, name } = {}\n  ) {\n    this.buffer = buffer;\n    this.atomicView = new Int32Array(buffer);\n    this.offset = initialOffset;\n    this.useAtomics = useAtomics;\n    this.stream = stream;\n    this.debug = debug;\n    this.name = name;\n  }\n\n  log(...args) {\n    if (this.debug) {\n      console.log(`[reader: ${this.name}]`, ...args);\n    }\n  }\n\n  waitWrite(name, timeout = null) {\n    if (this.useAtomics) {\n      this.log(`waiting for ${name}`);\n\n      while (Atomics.load(this.atomicView, 0) === WRITEABLE) {\n        if (timeout != null) {\n          if (\n            Atomics.wait(this.atomicView, 0, WRITEABLE, timeout) === 'timed-out'\n          ) {\n            throw new Error('timeout');\n          }\n        }\n\n        Atomics.wait(this.atomicView, 0, WRITEABLE, 500);\n      }\n\n      this.log(`resumed for ${name}`);\n    } else {\n      if (this.atomicView[0] !== READABLE) {\n        throw new Error('`waitWrite` expected array to be readable');\n      }\n    }\n  }\n\n  flip() {\n    this.log('flip');\n    if (this.useAtomics) {\n      let prev = Atomics.compareExchange(\n        this.atomicView,\n        0,\n        READABLE,\n        WRITEABLE\n      );\n\n      if (prev !== READABLE) {\n        throw new Error('Read data out of sync! This is disastrous');\n      }\n\n      Atomics.notify(this.atomicView, 0);\n    } else {\n      this.atomicView[0] = WRITEABLE;\n    }\n\n    this.offset = 4;\n  }\n\n  done() {\n    this.waitWrite('done');\n\n    let dataView = new DataView(this.buffer, this.offset);\n    let done = dataView.getUint32(0) === FINALIZED;\n\n    if (done) {\n      this.log('done');\n      this.flip();\n    }\n\n    return done;\n  }\n\n  peek(fn) {\n    this.peekOffset = this.offset;\n    let res = fn();\n    this.offset = this.peekOffset;\n    this.peekOffset = null;\n    return res;\n  }\n\n  string(timeout) {\n    this.waitWrite('string', timeout);\n\n    let byteLength = this._int32();\n    let length = byteLength / 2;\n\n    let dataView = new DataView(this.buffer, this.offset, byteLength);\n    let chars = [];\n    for (let i = 0; i < length; i++) {\n      chars.push(dataView.getUint16(i * 2));\n    }\n    let str = String.fromCharCode.apply(null, chars);\n    this.log('string', str);\n\n    this.offset += byteLength;\n\n    if (this.peekOffset == null) {\n      this.flip();\n    }\n    return str;\n  }\n\n  _int32() {\n    let byteLength = 4;\n\n    let dataView = new DataView(this.buffer, this.offset);\n    let num = dataView.getInt32();\n    this.log('_int32', num);\n\n    this.offset += byteLength;\n    return num;\n  }\n\n  int32() {\n    this.waitWrite('int32');\n    let num = this._int32();\n    this.log('int32', num);\n\n    if (this.peekOffset == null) {\n      this.flip();\n    }\n    return num;\n  }\n\n  bytes() {\n    this.waitWrite('bytes');\n\n    let byteLength = this._int32();\n\n    let bytes = new ArrayBuffer(byteLength);\n    new Uint8Array(bytes).set(\n      new Uint8Array(this.buffer, this.offset, byteLength)\n    );\n    this.log('bytes', bytes);\n\n    this.offset += byteLength;\n\n    if (this.peekOffset == null) {\n      this.flip();\n    }\n    return bytes;\n  }\n}\n\nclass Writer {\n  constructor(\n    buffer,\n    { initialOffset = 4, useAtomics = true, stream = true, debug, name } = {}\n  ) {\n    this.buffer = buffer;\n    this.atomicView = new Int32Array(buffer);\n    this.offset = initialOffset;\n    this.useAtomics = useAtomics;\n    this.stream = stream;\n\n    this.debug = debug;\n    this.name = name;\n\n    if (this.useAtomics) {\n      // The buffer starts out as writeable\n      Atomics.store(this.atomicView, 0, WRITEABLE);\n    } else {\n      this.atomicView[0] = WRITEABLE;\n    }\n  }\n\n  log(...args) {\n    if (this.debug) {\n      console.log(`[writer: ${this.name}]`, ...args);\n    }\n  }\n\n  waitRead(name) {\n    if (this.useAtomics) {\n      this.log(`waiting for ${name}`);\n      // Switch to writable\n      // Atomics.store(this.atomicView, 0, 1);\n\n      let prev = Atomics.compareExchange(\n        this.atomicView,\n        0,\n        WRITEABLE,\n        READABLE\n      );\n\n      if (prev !== WRITEABLE) {\n        throw new Error(\n          'Wrote something into unwritable buffer! This is disastrous'\n        );\n      }\n\n      Atomics.notify(this.atomicView, 0);\n\n      while (Atomics.load(this.atomicView, 0) === READABLE) {\n        // console.log('waiting to be read...');\n        Atomics.wait(this.atomicView, 0, READABLE, 500);\n      }\n\n      this.log(`resumed for ${name}`);\n    } else {\n      this.atomicView[0] = READABLE;\n    }\n\n    this.offset = 4;\n  }\n\n  finalize() {\n    this.log('finalizing');\n    let dataView = new DataView(this.buffer, this.offset);\n    dataView.setUint32(0, FINALIZED);\n    this.waitRead('finalize');\n  }\n\n  string(str) {\n    this.log('string', str);\n\n    let byteLength = str.length * 2;\n    this._int32(byteLength);\n\n    let dataView = new DataView(this.buffer, this.offset, byteLength);\n    for (let i = 0; i < str.length; i++) {\n      dataView.setUint16(i * 2, str.charCodeAt(i));\n    }\n\n    this.offset += byteLength;\n    this.waitRead('string');\n  }\n\n  _int32(num) {\n    let byteLength = 4;\n\n    let dataView = new DataView(this.buffer, this.offset);\n    dataView.setInt32(0, num);\n\n    this.offset += byteLength;\n  }\n\n  int32(num) {\n    this.log('int32', num);\n    this._int32(num);\n    this.waitRead('int32');\n  }\n\n  bytes(buffer) {\n    this.log('bytes', buffer);\n\n    let byteLength = buffer.byteLength;\n    this._int32(byteLength);\n    new Uint8Array(this.buffer, this.offset).set(new Uint8Array(buffer));\n\n    this.offset += byteLength;\n    this.waitRead('bytes');\n  }\n}\n\nfunction positionToKey$1(pos, blockSize) {\n  // We are forced to round because of floating point error. `pos`\n  // should always be divisible by `blockSize`\n  return Math.round(pos / blockSize);\n}\n\nfunction startWorker(reader, writer) {\n  // In a normal world, we'd spawn the worker here as a child worker.\n  // However Safari doesn't support nested workers, so we have to\n  // proxy them through the main thread\n  self.postMessage({\n    type: '__absurd:spawn-idb-worker',\n    argBuffer: writer.buffer,\n    resultBuffer: reader.buffer\n  });\n\n  self.addEventListener('message', e => {\n    switch (e.data.type) {\n      // Normally you would use `postMessage` control the profiler in\n      // a worker (just like this worker go those events), and the\n      // perf library automatically handles those events. We don't do\n      // that for the special backend worker though because it's\n      // always blocked when it's not processing. Instead we forward\n      // these events by going through the atomics layer to unblock it\n      // to make sure it starts immediately\n      case '__perf-deets:start-profile':\n        writer.string('profile-start');\n        writer.finalize();\n        reader.int32();\n        reader.done();\n        break;\n\n      case '__perf-deets:stop-profile':\n        writer.string('profile-stop');\n        writer.finalize();\n        reader.int32();\n        reader.done();\n        break;\n    }\n  });\n}\n\nclass FileOps {\n  constructor(filename) {\n    this.filename = filename;\n  }\n\n  // TODO: This should be renamed to `getDatabaseName`\n  getStoreName() {\n    return this.filename.replace(/\\//g, '-');\n  }\n\n  invokeWorker(method, args) {\n    if (this.reader == null || this.writer == null) {\n      throw new Error(\n        `Attempted ${method} on ${this.filename} but file not open`\n      );\n    }\n\n    let reader = this.reader;\n    let writer = this.writer;\n\n    switch (method) {\n      case 'readBlocks': {\n        let { name, positions, blockSize } = args;\n\n        let res = [];\n        for (let pos of positions) {\n          writer.string('readBlock');\n          writer.string(name);\n          writer.int32(positionToKey$1(pos, blockSize));\n          writer.finalize();\n\n          let data = reader.bytes();\n          reader.done();\n          res.push({\n            pos,\n            // If th length is 0, the block didn't exist. We return a\n            // blank block in that case\n            data: data.byteLength === 0 ? new ArrayBuffer(blockSize) : data\n          });\n        }\n\n        return res;\n      }\n\n      case 'writeBlocks': {\n        let { name, writes, blockSize } = args;\n        writer.string('writeBlocks');\n        writer.string(name);\n        for (let write of writes) {\n          writer.int32(positionToKey$1(write.pos, blockSize));\n          writer.bytes(write.data);\n        }\n        writer.finalize();\n\n        let res = reader.int32();\n        reader.done();\n        return res;\n      }\n\n      case 'readMeta': {\n        writer.string('readMeta');\n        writer.string(args.name);\n        writer.finalize();\n\n        let size = reader.int32();\n        let blockSize = reader.int32();\n        reader.done();\n        return size === -1 ? null : { size, blockSize };\n      }\n\n      case 'writeMeta': {\n        let { name, meta } = args;\n        writer.string('writeMeta');\n        writer.string(name);\n        writer.int32(meta.size);\n        // writer.int32(meta.blockSize);\n        writer.finalize();\n\n        let res = reader.int32();\n        reader.done();\n        return res;\n      }\n\n      case 'closeFile': {\n        writer.string('closeFile');\n        writer.string(args.name);\n        writer.finalize();\n\n        let res = reader.int32();\n        reader.done();\n        return res;\n      }\n\n      case 'lockFile': {\n        writer.string('lockFile');\n        writer.string(args.name);\n        writer.int32(args.lockType);\n        writer.finalize();\n\n        let res = reader.int32();\n        reader.done();\n        return res === 0;\n      }\n\n      case 'unlockFile': {\n        writer.string('unlockFile');\n        writer.string(args.name);\n        writer.int32(args.lockType);\n        writer.finalize();\n\n        let res = reader.int32();\n        reader.done();\n        return res === 0;\n      }\n    }\n  }\n\n  lock(lockType) {\n    return this.invokeWorker('lockFile', {\n      name: this.getStoreName(),\n      lockType\n    });\n  }\n\n  unlock(lockType) {\n    return this.invokeWorker('unlockFile', {\n      name: this.getStoreName(),\n      lockType\n    });\n  }\n\n  delete() {\n    // Close the file if it's open\n    if (this.reader || this.writer) {\n      this.close();\n    }\n\n    // We delete it here because we can't do it in the worker; the\n    // worker is stopped when the file closes. If we didn't do that,\n    // workers would leak in the case of closing a file but not\n    // deleting it. We could potentially restart the worker here if\n    // needed, but for now just assume that the deletion is a success\n    let req = globalThis.indexedDB.deleteDatabase(this.getStoreName());\n    req.onerror = () => {\n      console.warn(`Deleting ${this.filename} database failed`);\n    };\n    req.onsuccess = () => {};\n  }\n\n  open() {\n    let argBuffer = new SharedArrayBuffer(4096 * 9);\n    this.writer = new Writer(argBuffer, {\n      name: 'args (backend)',\n      debug: false\n    });\n\n    let resultBuffer = new SharedArrayBuffer(4096 * 9);\n    this.reader = new Reader(resultBuffer, {\n      name: 'results',\n      debug: false\n    });\n\n    // TODO: We could pool workers and reuse them so opening files\n    // aren't so slow\n    startWorker(this.reader, this.writer);\n  }\n\n  close() {\n    this.invokeWorker('closeFile', { name: this.getStoreName() });\n    this.reader = null;\n    this.writer = null;\n    this.worker = null;\n  }\n\n  readMeta() {\n    return this.invokeWorker('readMeta', { name: this.getStoreName() });\n  }\n\n  writeMeta(meta) {\n    return this.invokeWorker('writeMeta', { name: this.getStoreName(), meta });\n  }\n\n  readBlocks(positions, blockSize) {\n    if (this.stats) {\n      this.stats.read += positions.length;\n    }\n\n    return this.invokeWorker('readBlocks', {\n      name: this.getStoreName(),\n      positions,\n      blockSize\n    });\n  }\n\n  writeBlocks(writes, blockSize) {\n    if (this.stats) {\n      this.stats.writes += writes.length;\n    }\n\n    return this.invokeWorker('writeBlocks', {\n      name: this.getStoreName(),\n      writes,\n      blockSize\n    });\n  }\n}\n\n/**\n * https://bugs.webkit.org/show_bug.cgi?id=226547\n * Safari has a horrible bug where IDB requests can hang while the browser is starting up.\n * The only solution is to keep nudging it until it's awake.\n * This probably creates garbage, but garbage is better than totally failing.\n */\nfunction idbReady() {\n    const isSafari = !navigator.userAgentData &&\n        /Safari\\//.test(navigator.userAgent) &&\n        !/Chrom(e|ium)\\//.test(navigator.userAgent);\n    // No point putting other browsers or older versions of Safari through this mess.\n    if (!isSafari || !indexedDB.databases)\n        return Promise.resolve();\n    let intervalId;\n    return new Promise((resolve) => {\n        const tryIdb = () => indexedDB.databases().finally(resolve);\n        intervalId = setInterval(tryIdb, 100);\n        tryIdb();\n    }).finally(() => clearInterval(intervalId));\n}\n\nfunction positionToKey(pos, blockSize) {\n  // We are forced to round because of floating point error. `pos`\n  // should always be divisible by `blockSize`\n  return Math.round(pos / blockSize);\n}\n\nasync function openDb(name) {\n  await idbReady();\n\n  return new Promise((resolve, reject) => {\n    let req = globalThis.indexedDB.open(name, 2);\n    req.onsuccess = event => {\n      let db = event.target.result;\n\n      db.onversionchange = () => {\n        console.log('closing because version changed');\n        db.close();\n      };\n      db.onclose = () => {};\n\n      resolve(db);\n    };\n    req.onupgradeneeded = event => {\n      let db = event.target.result;\n      if (!db.objectStoreNames.contains('data')) {\n        db.createObjectStore('data');\n      }\n    };\n    req.onblocked = e => console.log('blocked', e);\n    req.onerror = req.onabort = e => reject(e.target.error);\n  });\n}\n\n// Using a separate class makes it easier to follow the code, and\n// importantly it removes any reliance on internal state in\n// `FileOpsFallback`. That would be problematic since these method\n// happen async; the args to `write` must be closed over so they don't\n// change\nclass Persistance {\n  constructor(dbName, onFallbackFailure) {\n    this.dbName = dbName;\n    this._openDb = null;\n    this.hasAlertedFailure = false;\n    this.onFallbackFailure = onFallbackFailure;\n  }\n\n  async getDb() {\n    if (this._openDb) {\n      return this._openDb;\n    }\n\n    this._openDb = await openDb(this.dbName);\n    return this._openDb;\n  }\n\n  closeDb() {\n    if (this._openDb) {\n      this._openDb.close();\n      this._openDb = null;\n    }\n  }\n\n  // Both `readAll` and `write` rely on IndexedDB transactional\n  // semantics to work, otherwise we'd have to coordinate them. If\n  // there are pending writes, the `readonly` transaction in `readAll`\n  // will block until they are all flushed out. If `write` is called\n  // multiple times, `readwrite` transactions can only run one at a\n  // time so it will naturally apply the writes sequentially (and\n  // atomically)\n\n  async readAll() {\n    let db = await this.getDb(this.dbName);\n    let blocks = new Map();\n\n    let trans = db.transaction(['data'], 'readonly');\n    let store = trans.objectStore('data');\n\n    return new Promise((resolve, reject) => {\n      // Open a cursor and iterate through the entire file\n      let req = store.openCursor(IDBKeyRange.lowerBound(-1));\n      req.onerror = reject;\n      req.onsuccess = e => {\n        let cursor = e.target.result;\n        if (cursor) {\n          blocks.set(cursor.key, cursor.value);\n          cursor.continue();\n        } else {\n          resolve(blocks);\n        }\n      };\n    });\n  }\n\n  async write(writes, cachedFirstBlock, hasLocked) {\n    let db = await this.getDb(this.dbName);\n\n    // We need grab a readwrite lock on the db, and then read to check\n    // to make sure we can write to it\n    let trans = db.transaction(['data'], 'readwrite');\n    let store = trans.objectStore('data');\n\n    await new Promise((resolve, reject) => {\n      let req = store.get(0);\n      req.onsuccess = e => {\n        if (hasLocked) {\n          if (!isSafeToWrite(req.result, cachedFirstBlock)) {\n            if (this.onFallbackFailure && !this.hasAlertedFailure) {\n              this.hasAlertedFailure = true;\n              this.onFallbackFailure();\n            }\n            reject(new Error('Fallback mode unable to write file changes'));\n            return;\n          }\n        }\n\n        // Flush all the writes\n        for (let write of writes) {\n          store.put(write.value, write.key);\n        }\n\n        trans.onsuccess = () => resolve();\n        trans.onerror = () => reject();\n      };\n      req.onerror = reject;\n    });\n  }\n}\n\nclass FileOpsFallback {\n  constructor(filename, onFallbackFailure) {\n    this.filename = filename;\n    this.dbName = this.filename.replace(/\\//g, '-');\n    this.cachedFirstBlock = null;\n    this.writeQueue = null;\n    this.blocks = new Map();\n    this.lockType = 0;\n    this.transferBlockOwnership = false;\n\n    this.persistance = new Persistance(this.dbName, onFallbackFailure);\n  }\n\n  async readIfFallback() {\n    this.transferBlockOwnership = true;\n    this.blocks = await this.persistance.readAll();\n\n    return this.readMeta();\n  }\n\n  lock(lockType) {\n    // Locks always succeed here. Essentially we're only working\n    // locally (we can't see any writes from anybody else) and we just\n    // want to track the lock so we know when it downgrades from write\n    // to read\n    this.cachedFirstBlock = this.blocks.get(0);\n    this.lockType = lockType;\n    return true;\n  }\n\n  unlock(lockType) {\n    if (this.lockType > LOCK_TYPES.SHARED && lockType === LOCK_TYPES.SHARED) {\n      // Within a write lock, we delay all writes until the end of the\n      // lock. We probably don't have to do this since we already\n      // delay writes until an `fsync`, however this is an extra\n      // measure to make sure we are writing everything atomically\n      this.flush();\n    }\n    this.lockType = lockType;\n    return true;\n  }\n\n  delete() {\n    let req = globalThis.indexedDB.deleteDatabase(this.dbName);\n    req.onerror = () => {\n      console.warn(`Deleting ${this.filename} database failed`);\n    };\n    req.onsuccess = () => {};\n  }\n\n  open() {\n    this.writeQueue = [];\n    this.lockType = 0;\n  }\n\n  close() {\n    this.flush();\n\n    if (this.transferBlockOwnership) {\n      this.transferBlockOwnership = false;\n    } else {\n      this.blocks = new Map();\n    }\n\n    this.persistance.closeDb();\n  }\n\n  readMeta() {\n    let metaBlock = this.blocks.get(-1);\n    if (metaBlock) {\n      let block = this.blocks.get(0);\n\n      return {\n        size: metaBlock.size,\n        blockSize: getPageSize(new Uint8Array(block))\n      };\n    }\n    return null;\n  }\n\n  writeMeta(meta) {\n    this.blocks.set(-1, meta);\n    this.queueWrite(-1, meta);\n  }\n\n  readBlocks(positions, blockSize) {\n    let res = [];\n    for (let pos of positions) {\n      res.push({\n        pos,\n        data: this.blocks.get(positionToKey(pos, blockSize))\n      });\n    }\n    return res;\n  }\n\n  writeBlocks(writes, blockSize) {\n    for (let write of writes) {\n      let key = positionToKey(write.pos, blockSize);\n      this.blocks.set(key, write.data);\n      this.queueWrite(key, write.data);\n    }\n\n    // No write lock; flush them out immediately\n    if (this.lockType <= LOCK_TYPES.SHARED) {\n      this.flush();\n    }\n  }\n\n  queueWrite(key, value) {\n    this.writeQueue.push({ key, value });\n  }\n\n  flush() {\n    if (this.writeQueue.length > 0) {\n      this.persistance.write(\n        this.writeQueue,\n        this.cachedFirstBlock,\n        this.lockType > LOCK_TYPES.SHARED\n      );\n      this.writeQueue = [];\n    }\n    this.cachedFirstBlock = null;\n  }\n}\n\nclass IndexedDBBackend {\n  constructor(onFallbackFailure) {\n    this.onFallbackFailure = onFallbackFailure;\n  }\n\n  createFile(filename) {\n    let ops;\n    if (typeof SharedArrayBuffer !== 'undefined') {\n      // SharedArrayBuffer exists! We can run this fully\n      ops = new FileOps(filename);\n    } else {\n      // SharedArrayBuffer is not supported. Use the fallback methods\n      // which provide a somewhat working version, but doesn't\n      // support mutations across connections (tabs)\n      ops = new FileOpsFallback(filename, this.onFallbackFailure);\n    }\n\n    let file = new File(filename, ops);\n\n    // If we don't need perf data, there's no reason for us to hold a\n    // reference to the files. If we did we'd have to worry about\n    // memory leaks\n    if (true) {\n      if (this._files == null) {\n        this._files = new Set();\n      }\n      this._files.add(file);\n    }\n\n    return file;\n  }\n\n  // Instead of controlling the profiler from the main thread by\n  // posting a message to this worker, you can control it inside the\n  // worker manually with these methods\n  startProfile() {\n    for (let file of this._files) {\n      // If the writer doesn't exist, that means the file has been\n      // deleted\n      if (file.ops.writer) {\n        let writer = file.ops.writer;\n        let reader = file.ops.reader;\n        writer.string('profile-start');\n        writer.finalize();\n        reader.int32();\n        reader.done();\n      }\n    }\n  }\n\n  stopProfile() {\n    for (let file of this._files) {\n      if (file.ops.writer) {\n        let writer = file.ops.writer;\n        let reader = file.ops.reader;\n        writer.string('profile-stop');\n        writer.finalize();\n        reader.int32();\n        reader.done();\n      }\n    }\n  }\n}\n\n\n\n\n//# sourceURL=webpack://@aphro/todo-mvc/../../node_modules/.pnpm/@aphro+absurd-sql@0.0.53/node_modules/@aphro/absurd-sql/dist/indexeddb-backend.js?");

/***/ }),

/***/ "../../node_modules/.pnpm/@aphro+sql.js@1.7.0/node_modules/@aphro/sql.js/dist/sql-wasm.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@aphro+sql.js@1.7.0/node_modules/@aphro/sql.js/dist/sql-wasm.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var __dirname = \"/\";\n/* module decorator */ module = __webpack_require__.nmd(module);\n\n// We are modularizing this manually because the current modularize setting in Emscripten has some issues:\n// https://github.com/kripken/emscripten/issues/5820\n// In addition, When you use emcc's modularization, it still expects to export a global object called `Module`,\n// which is able to be used/called before the WASM is loaded.\n// The modularization below exports a promise that loads and resolves to the actual sql.js module.\n// That way, this module can't be used before the WASM is finished loading.\n\n// We are going to define a function that a user will call to start loading initializing our Sql.js library\n// However, that function might be called multiple times, and on subsequent calls, we don't actually want it to instantiate a new instance of the Module\n// Instead, we want to return the previously loaded module\n\n// TODO: Make this not declare a global if used in the browser\nvar initSqlJsPromise = undefined;\n\nvar initSqlJs = function (moduleConfig) {\n\n    if (initSqlJsPromise){\n      return initSqlJsPromise;\n    }\n    // If we're here, we've never called this function before\n    initSqlJsPromise = new Promise(function (resolveModule, reject) {\n\n        // We are modularizing this manually because the current modularize setting in Emscripten has some issues:\n        // https://github.com/kripken/emscripten/issues/5820\n\n        // The way to affect the loading of emcc compiled modules is to create a variable called `Module` and add\n        // properties to it, like `preRun`, `postRun`, etc\n        // We are using that to get notified when the WASM has finished loading.\n        // Only then will we return our promise\n\n        // If they passed in a moduleConfig object, use that\n        // Otherwise, initialize Module to the empty object\n        var Module = typeof moduleConfig !== 'undefined' ? moduleConfig : {};\n\n        // EMCC only allows for a single onAbort function (not an array of functions)\n        // So if the user defined their own onAbort function, we remember it and call it\n        var originalOnAbortFunction = Module['onAbort'];\n        Module['onAbort'] = function (errorThatCausedAbort) {\n            reject(new Error(errorThatCausedAbort));\n            if (originalOnAbortFunction){\n              originalOnAbortFunction(errorThatCausedAbort);\n            }\n        };\n\n        Module['postRun'] = Module['postRun'] || [];\n        Module['postRun'].push(function () {\n            // When Emscripted calls postRun, this promise resolves with the built Module\n            resolveModule(Module);\n        });\n\n        // There is a section of code in the emcc-generated code below that looks like this:\n        // (Note that this is lowercase `module`)\n        // if (typeof module !== 'undefined') {\n        //     module['exports'] = Module;\n        // }\n        // When that runs, it's going to overwrite our own modularization export efforts in shell-post.js!\n        // The only way to tell emcc not to emit it is to pass the MODULARIZE=1 or MODULARIZE_INSTANCE=1 flags,\n        // but that carries with it additional unnecessary baggage/bugs we don't want either.\n        // So, we have three options:\n        // 1) We undefine `module`\n        // 2) We remember what `module['exports']` was at the beginning of this function and we restore it later\n        // 3) We write a script to remove those lines of code as part of the Make process.\n        //\n        // Since those are the only lines of code that care about module, we will undefine it. It's the most straightforward\n        // of the options, and has the side effect of reducing emcc's efforts to modify the module if its output were to change in the future.\n        // That's a nice side effect since we're handling the modularization efforts ourselves\n        module = undefined;\n\n        // The emcc-generated code and shell-post.js code goes below,\n        // meaning that all of it runs inside of this promise. If anything throws an exception, our promise will abort\n\nvar Module;Module||(Module=typeof Module !== 'undefined' ? Module : {});null;\nModule.onRuntimeInitialized=function(){function a(h,m){this.Ka=h;this.db=m;this.Ja=1;this.ob=[]}function b(h,m){this.db=m;m=d(h)+1;this.$a=aa(m);if(null===this.$a)throw Error(\"Unable to allocate memory for the SQL string\");p(h,t,this.$a,m);this.lb=this.$a;this.Xa=this.Eb=null}function c(h,{filename:m=!1}={}){!1===m?(this.filename=\"dbfile_\"+(4294967295*Math.random()>>>0),this.Mc=!0,null!=h&&y.rb(\"/\",this.filename,h,!0,!0)):this.filename=h;this.handleError(g(this.filename,e));this.db=B(e,\"i32\");xb(this.db);\nthis.fb={};this.Qa={}}var e=C(4),f=Module.cwrap,g=f(\"sqlite3_open\",\"number\",[\"string\",\"number\"]),k=f(\"sqlite3_close_v2\",\"number\",[\"number\"]),l=f(\"sqlite3_exec\",\"number\",[\"number\",\"string\",\"number\",\"number\",\"number\"]),q=f(\"sqlite3_changes\",\"number\",[\"number\"]),n=f(\"sqlite3_prepare_v2\",\"number\",[\"number\",\"string\",\"number\",\"number\",\"number\"]),r=f(\"sqlite3_sql\",\"string\",[\"number\"]),x=f(\"sqlite3_normalized_sql\",\"string\",[\"number\"]),z=f(\"sqlite3_prepare_v2\",\"number\",[\"number\",\"number\",\"number\",\"number\",\n\"number\"]),D=f(\"sqlite3_bind_text\",\"number\",[\"number\",\"number\",\"number\",\"number\",\"number\"]),A=f(\"sqlite3_bind_blob\",\"number\",[\"number\",\"number\",\"number\",\"number\",\"number\"]),S=f(\"sqlite3_bind_double\",\"number\",[\"number\",\"number\",\"number\"]),Y=f(\"sqlite3_bind_int\",\"number\",[\"number\",\"number\",\"number\"]),T=f(\"sqlite3_bind_parameter_index\",\"number\",[\"number\",\"string\"]),Ia=f(\"sqlite3_step\",\"number\",[\"number\"]),E=f(\"sqlite3_errmsg\",\"string\",[\"number\"]),yb=f(\"sqlite3_column_count\",\"number\",[\"number\"]),zb=f(\"sqlite3_data_count\",\n\"number\",[\"number\"]),Ab=f(\"sqlite3_column_double\",\"number\",[\"number\",\"number\"]),$a=f(\"sqlite3_column_text\",\"string\",[\"number\",\"number\"]),Bb=f(\"sqlite3_column_blob\",\"number\",[\"number\",\"number\"]),Cb=f(\"sqlite3_column_bytes\",\"number\",[\"number\",\"number\"]),Db=f(\"sqlite3_column_type\",\"number\",[\"number\",\"number\"]),Eb=f(\"sqlite3_column_name\",\"string\",[\"number\",\"number\"]),Fb=f(\"sqlite3_reset\",\"number\",[\"number\"]),Gb=f(\"sqlite3_clear_bindings\",\"number\",[\"number\"]),Hb=f(\"sqlite3_finalize\",\"number\",[\"number\"]),\nIb=f(\"sqlite3_create_function_v2\",\"number\",\"number string number number number number number number number\".split(\" \")),Jb=f(\"sqlite3_value_type\",\"number\",[\"number\"]),Kb=f(\"sqlite3_value_bytes\",\"number\",[\"number\"]),Lb=f(\"sqlite3_value_text\",\"string\",[\"number\"]),Mb=f(\"sqlite3_value_blob\",\"number\",[\"number\"]),Nb=f(\"sqlite3_value_double\",\"number\",[\"number\"]),Ob=f(\"sqlite3_result_double\",\"\",[\"number\",\"number\"]),ab=f(\"sqlite3_result_null\",\"\",[\"number\"]),Pb=f(\"sqlite3_result_text\",\"\",[\"number\",\"string\",\n\"number\",\"number\"]),Qb=f(\"sqlite3_result_blob\",\"\",[\"number\",\"number\",\"number\",\"number\"]),Rb=f(\"sqlite3_result_int\",\"\",[\"number\",\"number\"]),bb=f(\"sqlite3_result_error\",\"\",[\"number\",\"string\",\"number\"]),xb=f(\"RegisterExtensionFunctions\",\"number\",[\"number\"]);a.prototype.bind=function(h){if(!this.Ka)throw\"Statement closed\";this.reset();return Array.isArray(h)?this.nc(h):null!=h&&\"object\"===typeof h?this.oc(h):!0};a.prototype.step=function(){if(!this.Ka)throw\"Statement closed\";this.Ja=1;var h=Ia(this.Ka);\nswitch(h){case 100:return!0;case 101:return!1;default:throw this.db.handleError(h);}};a.prototype.Xb=function(h){null==h&&(h=this.Ja,this.Ja+=1);return Ab(this.Ka,h)};a.prototype.Fc=function(h){null==h&&(h=this.Ja,this.Ja+=1);h=$a(this.Ka,h);if(\"function\"!==typeof BigInt)throw Error(\"BigInt is not supported\");return BigInt(h)};a.prototype.Hc=function(h){null==h&&(h=this.Ja,this.Ja+=1);return $a(this.Ka,h)};a.prototype.getBlob=function(h){null==h&&(h=this.Ja,this.Ja+=1);var m=Cb(this.Ka,h);h=Bb(this.Ka,\nh);for(var u=new Uint8Array(m),v=0;v<m;v+=1)u[v]=I[h+v];return u};a.prototype.get=function(h,m){m=m||{};null!=h&&this.bind(h)&&this.step();h=[];for(var u=zb(this.Ka),v=0;v<u;v+=1)switch(Db(this.Ka,v)){case 1:var w=m.useBigInt?this.Fc(v):this.Xb(v);h.push(w);break;case 2:h.push(this.Xb(v));break;case 3:h.push(this.Hc(v));break;case 4:h.push(this.getBlob(v));break;default:h.push(null)}return h};a.prototype.getColumnNames=function(){for(var h=[],m=yb(this.Ka),u=0;u<m;u+=1)h.push(Eb(this.Ka,u));return h};\na.prototype.getAsObject=function(h,m){h=this.get(h,m);m=this.getColumnNames();for(var u={},v=0;v<m.length;v+=1)u[m[v]]=h[v];return u};a.prototype.getSQL=function(){return r(this.Ka)};a.prototype.getNormalizedSQL=function(){return x(this.Ka)};a.prototype.run=function(h){null!=h&&this.bind(h);this.step();return this.reset()};a.prototype.Mb=function(h,m){null==m&&(m=this.Ja,this.Ja+=1);h=ba(h);var u=ca(h);this.ob.push(u);this.db.handleError(D(this.Ka,m,u,h.length-1,0))};a.prototype.mc=function(h,m){null==\nm&&(m=this.Ja,this.Ja+=1);var u=ca(h);this.ob.push(u);this.db.handleError(A(this.Ka,m,u,h.length,0))};a.prototype.Lb=function(h,m){null==m&&(m=this.Ja,this.Ja+=1);this.db.handleError((h===(h|0)?Y:S)(this.Ka,m,h))};a.prototype.pc=function(h){null==h&&(h=this.Ja,this.Ja+=1);A(this.Ka,h,0,0,0)};a.prototype.Nb=function(h,m){null==m&&(m=this.Ja,this.Ja+=1);switch(typeof h){case \"string\":this.Mb(h,m);return;case \"number\":this.Lb(h,m);return;case \"bigint\":this.Mb(h.toString(),m);return;case \"boolean\":this.Lb(h+\n0,m);return;case \"object\":if(null===h){this.pc(m);return}if(null!=h.length){this.mc(h,m);return}}throw\"Wrong API use : tried to bind a value of an unknown type (\"+h+\").\";};a.prototype.oc=function(h){var m=this;Object.keys(h).forEach(function(u){var v=T(m.Ka,u);0!==v&&m.Nb(h[u],v)});return!0};a.prototype.nc=function(h){for(var m=0;m<h.length;m+=1)this.Nb(h[m],m+1);return!0};a.prototype.reset=function(){this.freemem();return 0===Gb(this.Ka)&&0===Fb(this.Ka)};a.prototype.freemem=function(){for(var h;void 0!==\n(h=this.ob.pop());)da(h)};a.prototype.free=function(){this.freemem();var h=0===Hb(this.Ka);delete this.db.fb[this.Ka];this.Ka=0;return h};b.prototype.next=function(){if(null===this.$a)return{done:!0};null!==this.Xa&&(this.Xa.free(),this.Xa=null);if(!this.db.db)throw this.tb(),Error(\"Database closed\");var h=fa(),m=C(4);ha(e);ha(m);try{this.db.handleError(z(this.db.db,this.lb,-1,e,m));this.lb=B(m,\"i32\");var u=B(e,\"i32\");if(0===u)return this.tb(),{done:!0};this.Xa=new a(u,this.db);this.db.fb[u]=this.Xa;\nreturn{value:this.Xa,done:!1}}catch(v){throw this.Eb=J(this.lb),this.tb(),v;}finally{ia(h)}};b.prototype.tb=function(){da(this.$a);this.$a=null};b.prototype.getRemainingSQL=function(){return null!==this.Eb?this.Eb:J(this.lb)};\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator&&(b.prototype[Symbol.iterator]=function(){return this});c.prototype.run=function(h,m){if(!this.db)throw\"Database closed\";if(m){h=this.prepare(h,m);try{h.step()}finally{h.free()}}else this.handleError(l(this.db,h,0,\n0,e));return this};c.prototype.exec=function(h,m,u){if(!this.db)throw\"Database closed\";var v=fa(),w=null;try{var F=d(h)+1,H=C(F);p(h,I,H,F);var ea=H;var Z=C(4);for(h=[];0!==B(ea,\"i8\");){ha(e);ha(Z);this.handleError(z(this.db,ea,-1,e,Z));var G=B(e,\"i32\");ea=B(Z,\"i32\");if(0!==G){F=null;w=new a(G,this);for(null!=m&&w.bind(m);w.step();)null===F&&(F={columns:w.getColumnNames(),values:[]},h.push(F)),F.values.push(w.get(null,u));w.free()}}return h}catch(K){throw w&&w.free(),K;}finally{ia(v)}};c.prototype.each=\nfunction(h,m,u,v,w){\"function\"===typeof m&&(v=u,u=m,m=void 0);h=this.prepare(h,m);try{for(;h.step();)u(h.getAsObject(null,w))}finally{h.free()}if(\"function\"===typeof v)return v()};c.prototype.prepare=function(h,m){ha(e);this.handleError(n(this.db,h,-1,e,0));h=B(e,\"i32\");if(0===h)throw\"Nothing to prepare\";var u=new a(h,this);null!=m&&u.bind(m);return this.fb[h]=u};c.prototype.iterateStatements=function(h){return new b(h,this)};c.prototype[\"export\"]=function(){Object.values(this.fb).forEach(function(m){m.free()});\nObject.values(this.Qa).forEach(ja);this.Qa={};this.handleError(k(this.db));var h=y.readFile(this.filename,{encoding:\"binary\"});this.handleError(g(this.filename,e));this.db=B(e,\"i32\");return h};c.prototype.close=function(){null!==this.db&&(Object.values(this.fb).forEach(function(h){h.free()}),Object.values(this.Qa).forEach(ja),this.Qa={},this.handleError(k(this.db)),this.Mc&&y.unlink(\"/\"+this.filename),this.db=null)};c.prototype.handleError=function(h){if(0===h)return null;h=E(this.db);throw Error(h);\n};c.prototype.getRowsModified=function(){return q(this.db)};c.prototype.create_function=function(h,m){Object.prototype.hasOwnProperty.call(this.Qa,h)&&(ja(this.Qa[h]),delete this.Qa[h]);var u=ka(function(v,w,F){for(var H,ea=[],Z=0;Z<w;Z+=1){var G=B(F+4*Z,\"i32\"),K=Jb(G);if(1===K||2===K)G=Nb(G);else if(3===K)G=Lb(G);else if(4===K){K=G;G=Kb(K);K=Mb(K);for(var cb=new Uint8Array(G),wa=0;wa<G;wa+=1)cb[wa]=I[K+wa];G=cb}else G=null;ea.push(G)}try{H=m.apply(null,ea)}catch(Sb){bb(v,Sb,-1);return}switch(typeof H){case \"boolean\":Rb(v,\nH?1:0);break;case \"number\":Ob(v,H);break;case \"string\":Pb(v,H,-1,-1);break;case \"object\":null===H?ab(v):null!=H.length?(w=ca(H),Qb(v,w,H.length,-1),da(w)):bb(v,\"Wrong API use : tried to return a value of an unknown type (\"+H+\").\",-1);break;default:ab(v)}},\"viii\");this.Qa[h]=u;this.handleError(Ib(this.db,h,m.length,1,0,u,0,0,0));return this};Module.Database=c;var na=new Map;Module.register_for_idb=h=>{const m=ka(function(w,F){w=na.get(w);return h.lock(w,F)?0:5},\"iii\"),u=ka(function(w,F){w=na.get(w);\nh.unlock(w,F);return 0},\"iii\"),v=ka(function(w,F){w=J(w);na.set(F,w)},\"vii\");Module._register_for_idb(m,u,v)};Module.cleanup_file=h=>{const m=[...na.entries()].find(u=>u[1]===h);na.delete(m[0])};Module.reset_filesystem=()=>{y.root=null;y.ec()}};var la=Object.assign({},Module),ma=\"./this.program\",oa=\"object\"==typeof window,pa=\"function\"==typeof importScripts,qa=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,L=\"\",ra,sa,ta,fs,ua,va;\nif(qa)L=pa?(__webpack_require__(/*! path */ \"?b168\").dirname)(L)+\"/\":__dirname+\"/\",va=()=>{ua||(fs=__webpack_require__(/*! fs */ \"?6772\"),ua=__webpack_require__(/*! path */ \"?b168\"))},ra=function(a,b){va();a=ua.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")},ta=a=>{a=ra(a,!0);a.buffer||(a=new Uint8Array(a));return a},sa=(a,b,c)=>{va();a=ua.normalize(a);fs.readFile(a,function(e,f){e?c(e):b(f.buffer)})},1<process.argv.length&&(ma=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2), true&&(module.exports=Module),Module.inspect=function(){return\"[Emscripten Module object]\"};\nelse if(oa||pa)pa?L=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(L=document.currentScript.src),L=0!==L.indexOf(\"blob:\")?L.substr(0,L.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",ra=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},pa&&(ta=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),sa=(a,b,c)=>{var e=new XMLHttpRequest;e.open(\"GET\",a,!0);e.responseType=\"arraybuffer\";\ne.onload=()=>{200==e.status||0==e.status&&e.response?b(e.response):c()};e.onerror=c;e.send(null)};var xa=Module.print||console.log.bind(console),M=Module.printErr||console.warn.bind(console);Object.assign(Module,la);la=null;Module.thisProgram&&(ma=Module.thisProgram);var ya=[],za;\nfunction ka(a,b){if(!za){za=new WeakMap;for(var c=N.length,e=0;e<0+c;e++){var f=N.get(e);f&&za.set(f,e)}}if(za.has(a))return za.get(a);if(ya.length)c=ya.pop();else{try{N.grow(1)}catch(l){if(!(l instanceof RangeError))throw l;throw\"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.\";}c=N.length-1}try{N.set(c,a)}catch(l){if(!(l instanceof TypeError))throw l;if(\"function\"==typeof WebAssembly.Function){f={i:\"i32\",j:\"i64\",f:\"f32\",d:\"f64\"};var g={parameters:[],results:\"v\"==b[0]?[]:[f[b[0]]]};for(e=1;e<\nb.length;++e)g.parameters.push(f[b[e]]);b=new WebAssembly.Function(g,a)}else{f=[1,0,1,96];g=b.slice(0,1);b=b.slice(1);var k={i:127,j:126,f:125,d:124};f.push(b.length);for(e=0;e<b.length;++e)f.push(k[b[e]]);\"v\"==g?f.push(0):f=f.concat([1,k[g]]);f[1]=f.length-2;b=new Uint8Array([0,97,115,109,1,0,0,0].concat(f,[2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0]));b=new WebAssembly.Module(b);b=(new WebAssembly.Instance(b,{e:{f:a}})).exports.f}N.set(c,b)}za.set(a,c);return c}\nfunction ja(a){za.delete(N.get(a));ya.push(a)}var Aa;Module.wasmBinary&&(Aa=Module.wasmBinary);var noExitRuntime=Module.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&O(\"no native wasm support detected\");\nfunction ha(a){var b=\"i32\";\"*\"===b.charAt(b.length-1)&&(b=\"i32\");switch(b){case \"i1\":I[a>>0]=0;break;case \"i8\":I[a>>0]=0;break;case \"i16\":Ba[a>>1]=0;break;case \"i32\":P[a>>2]=0;break;case \"i64\":Q=[0,(R=0,1<=+Math.abs(R)?0<R?(Math.min(+Math.floor(R/4294967296),4294967295)|0)>>>0:~~+Math.ceil((R-+(~~R>>>0))/4294967296)>>>0:0)];P[a>>2]=Q[0];P[a+4>>2]=Q[1];break;case \"float\":Ca[a>>2]=0;break;case \"double\":Da[a>>3]=0;break;default:O(\"invalid type for setValue: \"+b)}}\nfunction B(a,b=\"i8\"){\"*\"===b.charAt(b.length-1)&&(b=\"i32\");switch(b){case \"i1\":return I[a>>0];case \"i8\":return I[a>>0];case \"i16\":return Ba[a>>1];case \"i32\":return P[a>>2];case \"i64\":return P[a>>2];case \"float\":return Ca[a>>2];case \"double\":return Number(Da[a>>3]);default:O(\"invalid type for getValue: \"+b)}return null}var Ea,Fa=!1;\nfunction Ga(a,b,c,e){var f={string:function(n){var r=0;if(null!==n&&void 0!==n&&0!==n){var x=(n.length<<2)+1;r=C(x);p(n,t,r,x)}return r},array:function(n){var r=C(n.length);I.set(n,r);return r}};a=Module[\"_\"+a];var g=[],k=0;if(e)for(var l=0;l<e.length;l++){var q=f[c[l]];q?(0===k&&(k=fa()),g[l]=q(e[l])):g[l]=e[l]}c=a.apply(null,g);return c=function(n){0!==k&&ia(k);return\"string\"===b?J(n):\"boolean\"===b?!!n:n}(c)}var Ha=0,Ja=1;\nfunction ca(a){var b=Ha==Ja?C(a.length):aa(a.length);a.subarray||a.slice||(a=new Uint8Array(a));t.set(a,b);return b}var Ka=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction La(a,b,c){var e=b+c;for(c=b;a[c]&&!(c>=e);)++c;if(16<c-b&&a.buffer&&Ka)return Ka.decode(a.subarray(b,c));for(e=\"\";b<c;){var f=a[b++];if(f&128){var g=a[b++]&63;if(192==(f&224))e+=String.fromCharCode((f&31)<<6|g);else{var k=a[b++]&63;f=224==(f&240)?(f&15)<<12|g<<6|k:(f&7)<<18|g<<12|k<<6|a[b++]&63;65536>f?e+=String.fromCharCode(f):(f-=65536,e+=String.fromCharCode(55296|f>>10,56320|f&1023))}}else e+=String.fromCharCode(f)}return e}function J(a,b){return a?La(t,a,b):\"\"}\nfunction p(a,b,c,e){if(!(0<e))return 0;var f=c;e=c+e-1;for(var g=0;g<a.length;++g){var k=a.charCodeAt(g);if(55296<=k&&57343>=k){var l=a.charCodeAt(++g);k=65536+((k&1023)<<10)|l&1023}if(127>=k){if(c>=e)break;b[c++]=k}else{if(2047>=k){if(c+1>=e)break;b[c++]=192|k>>6}else{if(65535>=k){if(c+2>=e)break;b[c++]=224|k>>12}else{if(c+3>=e)break;b[c++]=240|k>>18;b[c++]=128|k>>12&63}b[c++]=128|k>>6&63}b[c++]=128|k&63}}b[c]=0;return c-f}\nfunction d(a){for(var b=0,c=0;c<a.length;++c){var e=a.charCodeAt(c);55296<=e&&57343>=e&&(e=65536+((e&1023)<<10)|a.charCodeAt(++c)&1023);127>=e?++b:b=2047>=e?b+2:65535>=e?b+3:b+4}return b}function Ma(a){var b=d(a)+1,c=aa(b);c&&p(a,I,c,b);return c}var Na,I,t,Ba,P,Ca,Da;\nfunction Oa(){var a=Ea.buffer;Na=a;Module.HEAP8=I=new Int8Array(a);Module.HEAP16=Ba=new Int16Array(a);Module.HEAP32=P=new Int32Array(a);Module.HEAPU8=t=new Uint8Array(a);Module.HEAPU16=new Uint16Array(a);Module.HEAPU32=new Uint32Array(a);Module.HEAPF32=Ca=new Float32Array(a);Module.HEAPF64=Da=new Float64Array(a)}var N,Pa=[],Qa=[],Ra=[];function Sa(){var a=Module.preRun.shift();Pa.unshift(a)}var Ta=0,Ua=null,Va=null;\nfunction Wa(){Ta++;Module.monitorRunDependencies&&Module.monitorRunDependencies(Ta)}function Xa(){Ta--;Module.monitorRunDependencies&&Module.monitorRunDependencies(Ta);if(0==Ta&&(null!==Ua&&(clearInterval(Ua),Ua=null),Va)){var a=Va;Va=null;a()}}Module.preloadedImages={};Module.preloadedAudios={};function O(a){if(Module.onAbort)Module.onAbort(a);a=\"Aborted(\"+a+\")\";M(a);Fa=!0;throw new WebAssembly.RuntimeError(a+\". Build with -s ASSERTIONS=1 for more info.\");}\nfunction Ya(){return U.startsWith(\"data:application/octet-stream;base64,\")}var U;U=\"sql-wasm.wasm\";if(!Ya()){var Za=U;U=Module.locateFile?Module.locateFile(Za,L):L+Za}function db(){var a=U;try{if(a==U&&Aa)return new Uint8Array(Aa);if(ta)return ta(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){O(b)}}\nfunction eb(){if(!Aa&&(oa||pa)){if(\"function\"==typeof fetch&&!U.startsWith(\"file://\"))return fetch(U,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+U+\"'\";return a.arrayBuffer()}).catch(function(){return db()});if(sa)return new Promise(function(a,b){sa(U,function(c){a(new Uint8Array(c))},b)})}return Promise.resolve().then(function(){return db()})}var R,Q;\nfunction fb(a){for(;0<a.length;){var b=a.shift();if(\"function\"==typeof b)b(Module);else{var c=b.bd;\"number\"==typeof c?void 0===b.qb?N.get(c)():N.get(c)(b.qb):c(void 0===b.qb?null:b.qb)}}}function gb(a,b){for(var c=0,e=a.length-1;0<=e;e--){var f=a[e];\".\"===f?a.splice(e,1):\"..\"===f?(a.splice(e,1),c++):c&&(a.splice(e,1),c--)}if(b)for(;c;c--)a.unshift(\"..\");return a}\nfunction hb(a){var b=\"/\"===a.charAt(0),c=\"/\"===a.substr(-1);(a=gb(a.split(\"/\").filter(function(e){return!!e}),!b).join(\"/\"))||b||(a=\".\");a&&c&&(a+=\"/\");return(b?\"/\":\"\")+a}function ib(a){var b=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/.exec(a).slice(1);a=b[0];b=b[1];if(!a&&!b)return\".\";b&&(b=b.substr(0,b.length-1));return a+b}function V(a){if(\"/\"===a)return\"/\";a=hb(a);a=a.replace(/\\/$/,\"\");var b=a.lastIndexOf(\"/\");return-1===b?a:a.substr(b+1)}\nfunction jb(a,b){return hb(a+\"/\"+b)}function kb(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var a=new Uint8Array(1);return function(){crypto.getRandomValues(a);return a[0]}}if(qa)try{var b=__webpack_require__(/*! crypto */ \"?8e01\");return function(){return b.randomBytes(1)[0]}}catch(c){}return function(){O(\"randomDevice\")}}\nfunction lb(){for(var a=\"\",b=!1,c=arguments.length-1;-1<=c&&!b;c--){b=0<=c?arguments[c]:y.cwd();if(\"string\"!=typeof b)throw new TypeError(\"Arguments to path.resolve must be strings\");if(!b)return\"\";a=b+\"/\"+a;b=\"/\"===b.charAt(0)}a=gb(a.split(\"/\").filter(function(e){return!!e}),!b).join(\"/\");return(b?\"/\":\"\")+a||\".\"}\nfunction mb(a,b){function c(k){for(var l=0;l<k.length&&\"\"===k[l];l++);for(var q=k.length-1;0<=q&&\"\"===k[q];q--);return l>q?[]:k.slice(l,q-l+1)}a=lb(a).substr(1);b=lb(b).substr(1);a=c(a.split(\"/\"));b=c(b.split(\"/\"));for(var e=Math.min(a.length,b.length),f=e,g=0;g<e;g++)if(a[g]!==b[g]){f=g;break}e=[];for(g=f;g<a.length;g++)e.push(\"..\");e=e.concat(b.slice(f));return e.join(\"/\")}var nb=[];function ob(a,b){nb[a]={input:[],output:[],Za:b};y.Ib(a,pb)}\nvar pb={open:function(a){var b=nb[a.node.rdev];if(!b)throw new y.ErrnoError(43);a.tty=b;a.seekable=!1},close:function(a){a.tty.Za.flush(a.tty)},flush:function(a){a.tty.Za.flush(a.tty)},read:function(a,b,c,e){if(!a.tty||!a.tty.Za.Yb)throw new y.ErrnoError(60);for(var f=0,g=0;g<e;g++){try{var k=a.tty.Za.Yb(a.tty)}catch(l){throw new y.ErrnoError(29);}if(void 0===k&&0===f)throw new y.ErrnoError(6);if(null===k||void 0===k)break;f++;b[c+g]=k}f&&(a.node.timestamp=Date.now());return f},write:function(a,b,\nc,e){if(!a.tty||!a.tty.Za.Fb)throw new y.ErrnoError(60);try{for(var f=0;f<e;f++)a.tty.Za.Fb(a.tty,b[c+f])}catch(g){throw new y.ErrnoError(29);}e&&(a.node.timestamp=Date.now());return f}},qb={Yb:function(a){if(!a.input.length){var b=null;if(qa){var c=Buffer.alloc(256),e=0;try{e=fs.readSync(process.stdin.fd,c,0,256,-1)}catch(f){if(f.toString().includes(\"EOF\"))e=0;else throw f;}0<e?b=c.slice(0,e).toString(\"utf-8\"):b=null}else\"undefined\"!=typeof window&&\"function\"==typeof window.prompt?(b=window.prompt(\"Input: \"),\nnull!==b&&(b+=\"\\n\")):\"function\"==typeof readline&&(b=readline(),null!==b&&(b+=\"\\n\"));if(!b)return null;a.input=ba(b,!0)}return a.input.shift()},Fb:function(a,b){null===b||10===b?(xa(La(a.output,0)),a.output=[]):0!=b&&a.output.push(b)},flush:function(a){a.output&&0<a.output.length&&(xa(La(a.output,0)),a.output=[])}},rb={Fb:function(a,b){null===b||10===b?(M(La(a.output,0)),a.output=[]):0!=b&&a.output.push(b)},flush:function(a){a.output&&0<a.output.length&&(M(La(a.output,0)),a.output=[])}},W={Oa:null,\nmount:function(){return W.createNode(null,\"/\",16895,0)},createNode:function(a,b,c,e){if(y.Ic(c)||y.isFIFO(c))throw new y.ErrnoError(63);W.Oa||(W.Oa={dir:{node:{getattr:W.node_ops.getattr,setattr:W.node_ops.setattr,lookup:W.node_ops.lookup,mknod:W.node_ops.mknod,rename:W.node_ops.rename,unlink:W.node_ops.unlink,rmdir:W.node_ops.rmdir,readdir:W.node_ops.readdir,symlink:W.node_ops.symlink},stream:{llseek:W.stream_ops.llseek}},file:{node:{getattr:W.node_ops.getattr,setattr:W.node_ops.setattr},stream:{llseek:W.stream_ops.llseek,\nread:W.stream_ops.read,write:W.stream_ops.write,allocate:W.stream_ops.allocate,mmap:W.stream_ops.mmap,msync:W.stream_ops.msync}},link:{node:{getattr:W.node_ops.getattr,setattr:W.node_ops.setattr,readlink:W.node_ops.readlink},stream:{}},Pb:{node:{getattr:W.node_ops.getattr,setattr:W.node_ops.setattr},stream:y.tc}});c=y.createNode(a,b,c,e);y.isDir(c.mode)?(c.node_ops=W.Oa.dir.node,c.stream_ops=W.Oa.dir.stream,c.Ha={}):y.isFile(c.mode)?(c.node_ops=W.Oa.file.node,c.stream_ops=W.Oa.file.stream,c.La=0,\nc.Ha=null):y.Ya(c.mode)?(c.node_ops=W.Oa.link.node,c.stream_ops=W.Oa.link.stream):y.ib(c.mode)&&(c.node_ops=W.Oa.Pb.node,c.stream_ops=W.Oa.Pb.stream);c.timestamp=Date.now();a&&(a.Ha[b]=c,a.timestamp=c.timestamp);return c},cd:function(a){return a.Ha?a.Ha.subarray?a.Ha.subarray(0,a.La):new Uint8Array(a.Ha):new Uint8Array(0)},Tb:function(a,b){var c=a.Ha?a.Ha.length:0;c>=b||(b=Math.max(b,c*(1048576>c?2:1.125)>>>0),0!=c&&(b=Math.max(b,256)),c=a.Ha,a.Ha=new Uint8Array(b),0<a.La&&a.Ha.set(c.subarray(0,a.La),\n0))},Uc:function(a,b){if(a.La!=b)if(0==b)a.Ha=null,a.La=0;else{var c=a.Ha;a.Ha=new Uint8Array(b);c&&a.Ha.set(c.subarray(0,Math.min(b,a.La)));a.La=b}},node_ops:{getattr:function(a){var b={};b.dev=y.ib(a.mode)?a.id:1;b.ino=a.id;b.mode=a.mode;b.nlink=1;b.uid=0;b.gid=0;b.rdev=a.rdev;y.isDir(a.mode)?b.size=4096:y.isFile(a.mode)?b.size=a.La:y.Ya(a.mode)?b.size=a.link.length:b.size=0;b.atime=new Date(a.timestamp);b.mtime=new Date(a.timestamp);b.ctime=new Date(a.timestamp);b.qc=4096;b.blocks=Math.ceil(b.size/\nb.qc);return b},setattr:function(a,b){void 0!==b.mode&&(a.mode=b.mode);void 0!==b.timestamp&&(a.timestamp=b.timestamp);void 0!==b.size&&W.Uc(a,b.size)},lookup:function(){throw y.vb[44];},mknod:function(a,b,c,e){return W.createNode(a,b,c,e)},rename:function(a,b,c){if(y.isDir(a.mode)){try{var e=y.lookupNode(b,c)}catch(g){}if(e)for(var f in e.Ha)throw new y.ErrnoError(55);}delete a.parent.Ha[a.name];a.parent.timestamp=Date.now();a.name=c;b.Ha[c]=a;b.timestamp=a.parent.timestamp;a.parent=b},unlink:function(a,\nb){delete a.Ha[b];a.timestamp=Date.now()},rmdir:function(a,b){var c=y.lookupNode(a,b),e;for(e in c.Ha)throw new y.ErrnoError(55);delete a.Ha[b];a.timestamp=Date.now()},readdir:function(a){var b=[\".\",\"..\"],c;for(c in a.Ha)a.Ha.hasOwnProperty(c)&&b.push(c);return b},symlink:function(a,b,c){a=W.createNode(a,b,41471,0);a.link=c;return a},readlink:function(a){if(!y.Ya(a.mode))throw new y.ErrnoError(28);return a.link}},stream_ops:{read:function(a,b,c,e,f){var g=a.node.Ha;if(f>=a.node.La)return 0;a=Math.min(a.node.La-\nf,e);if(8<a&&g.subarray)b.set(g.subarray(f,f+a),c);else for(e=0;e<a;e++)b[c+e]=g[f+e];return a},write:function(a,b,c,e,f,g){b.buffer===I.buffer&&(g=!1);if(!e)return 0;a=a.node;a.timestamp=Date.now();if(b.subarray&&(!a.Ha||a.Ha.subarray)){if(g)return a.Ha=b.subarray(c,c+e),a.La=e;if(0===a.La&&0===f)return a.Ha=b.slice(c,c+e),a.La=e;if(f+e<=a.La)return a.Ha.set(b.subarray(c,c+e),f),e}W.Tb(a,f+e);if(a.Ha.subarray&&b.subarray)a.Ha.set(b.subarray(c,c+e),f);else for(g=0;g<e;g++)a.Ha[f+g]=b[c+g];a.La=Math.max(a.La,\nf+e);return e},llseek:function(a,b,c){1===c?b+=a.position:2===c&&y.isFile(a.node.mode)&&(b+=a.node.La);if(0>b)throw new y.ErrnoError(28);return b},allocate:function(a,b,c){W.Tb(a.node,b+c);a.node.La=Math.max(a.node.La,b+c)},mmap:function(a,b,c,e,f,g){if(0!==b)throw new y.ErrnoError(28);if(!y.isFile(a.node.mode))throw new y.ErrnoError(43);a=a.node.Ha;if(g&2||a.buffer!==Na){if(0<e||e+c<a.length)a.subarray?a=a.subarray(e,e+c):a=Array.prototype.slice.call(a,e,e+c);e=!0;c=65536*Math.ceil(c/65536);(g=sb(65536,\nc))?(t.fill(0,g,g+c),c=g):c=0;if(!c)throw new y.ErrnoError(48);I.set(a,c)}else e=!1,c=a.byteOffset;return{Tc:c,lc:e}},msync:function(a,b,c,e,f){if(!y.isFile(a.node.mode))throw new y.ErrnoError(43);if(f&2)return 0;W.stream_ops.write(a,b,0,e,c,!1);return 0}}};function tb(a,b,c){var e=\"al \"+a;sa(a,function(f){f||O('Loading data file \"'+a+'\" failed (no arrayBuffer).');b(new Uint8Array(f));e&&Xa()},function(){if(c)c();else throw'Loading data file \"'+a+'\" failed.';});e&&Wa()}\nvar y={root:null,eb:[],Rb:{},streams:[],Oc:1,Na:null,Qb:\"/\",zb:!1,bc:!0,ErrnoError:null,vb:{},Cc:null,mb:0,lookupPath:(a,b={})=>{a=lb(y.cwd(),a);if(!a)return{path:\"\",node:null};b=Object.assign({ub:!0,Hb:0},b);if(8<b.Hb)throw new y.ErrnoError(32);a=gb(a.split(\"/\").filter(k=>!!k),!1);for(var c=y.root,e=\"/\",f=0;f<a.length;f++){var g=f===a.length-1;if(g&&b.parent)break;c=y.lookupNode(c,a[f]);e=jb(e,a[f]);y.Ua(c)&&(!g||g&&b.ub)&&(c=c.cb.root);if(!g||b.Ma)for(g=0;y.Ya(c.mode);)if(c=y.readlink(e),e=lb(ib(e),\nc),c=y.lookupPath(e,{Hb:b.Hb+1}).node,40<g++)throw new y.ErrnoError(32);}return{path:e,node:c}},Ra:a=>{for(var b;;){if(y.isRoot(a))return a=a.mount.dc,b?\"/\"!==a[a.length-1]?a+\"/\"+b:a+b:a;b=b?a.name+\"/\"+b:a.name;a=a.parent}},yb:(a,b)=>{for(var c=0,e=0;e<b.length;e++)c=(c<<5)-c+b.charCodeAt(e)|0;return(a+c>>>0)%y.Na.length},$b:a=>{var b=y.yb(a.parent.id,a.name);a.Wa=y.Na[b];y.Na[b]=a},ac:a=>{var b=y.yb(a.parent.id,a.name);if(y.Na[b]===a)y.Na[b]=a.Wa;else for(b=y.Na[b];b;){if(b.Wa===a){b.Wa=a.Wa;break}b=\nb.Wa}},lookupNode:(a,b)=>{var c=y.Kc(a);if(c)throw new y.ErrnoError(c,a);for(c=y.Na[y.yb(a.id,b)];c;c=c.Wa){var e=c.name;if(c.parent.id===a.id&&e===b)return c}return y.lookup(a,b)},createNode:(a,b,c,e)=>{a=new y.FSNode(a,b,c,e);y.$b(a);return a},sb:a=>{y.ac(a)},isRoot:a=>a===a.parent,Ua:a=>!!a.cb,isFile:a=>32768===(a&61440),isDir:a=>16384===(a&61440),Ya:a=>40960===(a&61440),ib:a=>8192===(a&61440),Ic:a=>24576===(a&61440),isFIFO:a=>4096===(a&61440),isSocket:a=>49152===(a&49152),Dc:{r:0,\"r+\":2,w:577,\n\"w+\":578,a:1089,\"a+\":1090},Nc:a=>{var b=y.Dc[a];if(\"undefined\"==typeof b)throw Error(\"Unknown file open mode: \"+a);return b},Ub:a=>{var b=[\"r\",\"w\",\"rw\"][a&3];a&512&&(b+=\"w\");return b},Ta:(a,b)=>{if(y.bc)return 0;if(!b.includes(\"r\")||a.mode&292){if(b.includes(\"w\")&&!(a.mode&146)||b.includes(\"x\")&&!(a.mode&73))return 2}else return 2;return 0},Kc:a=>{var b=y.Ta(a,\"x\");return b?b:a.node_ops.lookup?0:2},Db:(a,b)=>{try{return y.lookupNode(a,b),20}catch(c){}return y.Ta(a,\"wx\")},jb:(a,b,c)=>{try{var e=y.lookupNode(a,\nb)}catch(f){return f.Ia}if(a=y.Ta(a,\"wx\"))return a;if(c){if(!y.isDir(e.mode))return 54;if(y.isRoot(e)||y.Ra(e)===y.cwd())return 10}else if(y.isDir(e.mode))return 31;return 0},Lc:(a,b)=>a?y.Ya(a.mode)?32:y.isDir(a.mode)&&(\"r\"!==y.Ub(b)||b&512)?31:y.Ta(a,y.Ub(b)):44,ic:4096,Pc:(a=0,b=y.ic)=>{for(;a<=b;a++)if(!y.streams[a])return a;throw new y.ErrnoError(33);},Sa:a=>y.streams[a],Ac:(a,b,c)=>{y.nb||(y.nb=function(){},y.nb.prototype={object:{get:function(){return this.node},set:function(e){this.node=e}}});\na=Object.assign(new y.nb,a);b=y.Pc(b,c);a.fd=b;return y.streams[b]=a},uc:a=>{y.streams[a]=null},tc:{open:a=>{a.stream_ops=y.Gc(a.node.rdev).stream_ops;a.stream_ops.open&&a.stream_ops.open(a)},llseek:()=>{throw new y.ErrnoError(70);}},Cb:a=>a>>8,gd:a=>a&255,Va:(a,b)=>a<<8|b,Ib:(a,b)=>{y.Rb[a]={stream_ops:b}},Gc:a=>y.Rb[a],Wb:a=>{var b=[];for(a=[a];a.length;){var c=a.pop();b.push(c);a.push.apply(a,c.eb)}return b},fc:(a,b)=>{function c(k){y.mb--;return b(k)}function e(k){if(k){if(!e.Bc)return e.Bc=!0,\nc(k)}else++g>=f.length&&c(null)}\"function\"==typeof a&&(b=a,a=!1);y.mb++;1<y.mb&&M(\"warning: \"+y.mb+\" FS.syncfs operations in flight at once, probably just doing extra work\");var f=y.Wb(y.root.mount),g=0;f.forEach(k=>{if(!k.type.fc)return e(null);k.type.fc(k,a,e)})},mount:(a,b,c)=>{var e=\"/\"===c,f=!c;if(e&&y.root)throw new y.ErrnoError(10);if(!e&&!f){var g=y.lookupPath(c,{ub:!1});c=g.path;g=g.node;if(y.Ua(g))throw new y.ErrnoError(10);if(!y.isDir(g.mode))throw new y.ErrnoError(54);}b={type:a,kd:b,\ndc:c,eb:[]};a=a.mount(b);a.mount=b;b.root=a;e?y.root=a:g&&(g.cb=b,g.mount&&g.mount.eb.push(b));return a},nd:a=>{a=y.lookupPath(a,{ub:!1});if(!y.Ua(a.node))throw new y.ErrnoError(28);a=a.node;var b=a.cb,c=y.Wb(b);Object.keys(y.Na).forEach(e=>{for(e=y.Na[e];e;){var f=e.Wa;c.includes(e.mount)&&y.sb(e);e=f}});a.cb=null;a.mount.eb.splice(a.mount.eb.indexOf(b),1)},lookup:(a,b)=>a.node_ops.lookup(a,b),mknod:(a,b,c)=>{var e=y.lookupPath(a,{parent:!0}).node;a=V(a);if(!a||\".\"===a||\"..\"===a)throw new y.ErrnoError(28);\nvar f=y.Db(e,a);if(f)throw new y.ErrnoError(f);if(!e.node_ops.mknod)throw new y.ErrnoError(63);return e.node_ops.mknod(e,a,b,c)},create:(a,b)=>y.mknod(a,(void 0!==b?b:438)&4095|32768,0),mkdir:(a,b)=>y.mknod(a,(void 0!==b?b:511)&1023|16384,0),hd:(a,b)=>{a=a.split(\"/\");for(var c=\"\",e=0;e<a.length;++e)if(a[e]){c+=\"/\"+a[e];try{y.mkdir(c,b)}catch(f){if(20!=f.Ia)throw f;}}},kb:(a,b,c)=>{\"undefined\"==typeof c&&(c=b,b=438);return y.mknod(a,b|8192,c)},symlink:(a,b)=>{if(!lb(a))throw new y.ErrnoError(44);var c=\ny.lookupPath(b,{parent:!0}).node;if(!c)throw new y.ErrnoError(44);b=V(b);var e=y.Db(c,b);if(e)throw new y.ErrnoError(e);if(!c.node_ops.symlink)throw new y.ErrnoError(63);return c.node_ops.symlink(c,b,a)},rename:(a,b)=>{var c=ib(a),e=ib(b),f=V(a),g=V(b);var k=y.lookupPath(a,{parent:!0});var l=k.node;k=y.lookupPath(b,{parent:!0});k=k.node;if(!l||!k)throw new y.ErrnoError(44);if(l.mount!==k.mount)throw new y.ErrnoError(75);var q=y.lookupNode(l,f);a=mb(a,e);if(\".\"!==a.charAt(0))throw new y.ErrnoError(28);\na=mb(b,c);if(\".\"!==a.charAt(0))throw new y.ErrnoError(55);try{var n=y.lookupNode(k,g)}catch(r){}if(q!==n){b=y.isDir(q.mode);if(f=y.jb(l,f,b))throw new y.ErrnoError(f);if(f=n?y.jb(k,g,b):y.Db(k,g))throw new y.ErrnoError(f);if(!l.node_ops.rename)throw new y.ErrnoError(63);if(y.Ua(q)||n&&y.Ua(n))throw new y.ErrnoError(10);if(k!==l&&(f=y.Ta(l,\"w\")))throw new y.ErrnoError(f);y.ac(q);try{l.node_ops.rename(q,k,g)}catch(r){throw r;}finally{y.$b(q)}}},rmdir:a=>{var b=y.lookupPath(a,{parent:!0}).node;a=V(a);\nvar c=y.lookupNode(b,a),e=y.jb(b,a,!0);if(e)throw new y.ErrnoError(e);if(!b.node_ops.rmdir)throw new y.ErrnoError(63);if(y.Ua(c))throw new y.ErrnoError(10);b.node_ops.rmdir(b,a);y.sb(c)},readdir:a=>{a=y.lookupPath(a,{Ma:!0}).node;if(!a.node_ops.readdir)throw new y.ErrnoError(54);return a.node_ops.readdir(a)},unlink:a=>{var b=y.lookupPath(a,{parent:!0}).node;if(!b)throw new y.ErrnoError(44);a=V(a);var c=y.lookupNode(b,a),e=y.jb(b,a,!1);if(e)throw new y.ErrnoError(e);if(!b.node_ops.unlink)throw new y.ErrnoError(63);\nif(y.Ua(c))throw new y.ErrnoError(10);b.node_ops.unlink(b,a);y.sb(c)},readlink:a=>{a=y.lookupPath(a).node;if(!a)throw new y.ErrnoError(44);if(!a.node_ops.readlink)throw new y.ErrnoError(28);return lb(y.Ra(a.parent),a.node_ops.readlink(a))},stat:(a,b)=>{a=y.lookupPath(a,{Ma:!b}).node;if(!a)throw new y.ErrnoError(44);if(!a.node_ops.getattr)throw new y.ErrnoError(63);return a.node_ops.getattr(a)},lstat:a=>y.stat(a,!0),chmod:(a,b,c)=>{a=\"string\"==typeof a?y.lookupPath(a,{Ma:!c}).node:a;if(!a.node_ops.setattr)throw new y.ErrnoError(63);\na.node_ops.setattr(a,{mode:b&4095|a.mode&-4096,timestamp:Date.now()})},lchmod:(a,b)=>{y.chmod(a,b,!0)},fchmod:(a,b)=>{a=y.Sa(a);if(!a)throw new y.ErrnoError(8);y.chmod(a.node,b)},chown:(a,b,c,e)=>{a=\"string\"==typeof a?y.lookupPath(a,{Ma:!e}).node:a;if(!a.node_ops.setattr)throw new y.ErrnoError(63);a.node_ops.setattr(a,{timestamp:Date.now()})},lchown:(a,b,c)=>{y.chown(a,b,c,!0)},fchown:(a,b,c)=>{a=y.Sa(a);if(!a)throw new y.ErrnoError(8);y.chown(a.node,b,c)},truncate:(a,b)=>{if(0>b)throw new y.ErrnoError(28);\na=\"string\"==typeof a?y.lookupPath(a,{Ma:!0}).node:a;if(!a.node_ops.setattr)throw new y.ErrnoError(63);if(y.isDir(a.mode))throw new y.ErrnoError(31);if(!y.isFile(a.mode))throw new y.ErrnoError(28);var c=y.Ta(a,\"w\");if(c)throw new y.ErrnoError(c);a.node_ops.setattr(a,{size:b,timestamp:Date.now()})},Ec:(a,b)=>{a=y.Sa(a);if(!a)throw new y.ErrnoError(8);if(0===(a.flags&2097155))throw new y.ErrnoError(28);y.truncate(a.node,b)},Xc:(a,b,c)=>{a=y.lookupPath(a,{Ma:!0}).node;a.node_ops.setattr(a,{timestamp:Math.max(b,\nc)})},open:(a,b,c,e,f)=>{if(\"\"===a)throw new y.ErrnoError(44);b=\"string\"==typeof b?y.Nc(b):b;c=b&64?(\"undefined\"==typeof c?438:c)&4095|32768:0;if(\"object\"==typeof a)var g=a;else{a=hb(a);try{g=y.lookupPath(a,{Ma:!(b&131072)}).node}catch(l){}}var k=!1;if(b&64)if(g){if(b&128)throw new y.ErrnoError(20);}else g=y.mknod(a,c,0),k=!0;if(!g)throw new y.ErrnoError(44);y.ib(g.mode)&&(b&=-513);if(b&65536&&!y.isDir(g.mode))throw new y.ErrnoError(54);if(!k&&(c=y.Lc(g,b)))throw new y.ErrnoError(c);b&512&&y.truncate(g,\n0);b&=-131713;e=y.Ac({node:g,path:y.Ra(g),flags:b,seekable:!0,position:0,stream_ops:g.stream_ops,Wc:[],error:!1},e,f);e.stream_ops.open&&e.stream_ops.open(e);!Module.logReadFiles||b&1||(y.Gb||(y.Gb={}),a in y.Gb||(y.Gb[a]=1));return e},close:a=>{if(y.bb(a))throw new y.ErrnoError(8);a.xb&&(a.xb=null);try{a.stream_ops.close&&a.stream_ops.close(a)}catch(b){throw b;}finally{y.uc(a.fd)}a.fd=null},bb:a=>null===a.fd,llseek:(a,b,c)=>{if(y.bb(a))throw new y.ErrnoError(8);if(!a.seekable||!a.stream_ops.llseek)throw new y.ErrnoError(70);\nif(0!=c&&1!=c&&2!=c)throw new y.ErrnoError(28);a.position=a.stream_ops.llseek(a,b,c);a.Wc=[];return a.position},read:(a,b,c,e,f)=>{if(0>e||0>f)throw new y.ErrnoError(28);if(y.bb(a))throw new y.ErrnoError(8);if(1===(a.flags&2097155))throw new y.ErrnoError(8);if(y.isDir(a.node.mode))throw new y.ErrnoError(31);if(!a.stream_ops.read)throw new y.ErrnoError(28);var g=\"undefined\"!=typeof f;if(!g)f=a.position;else if(!a.seekable)throw new y.ErrnoError(70);b=a.stream_ops.read(a,b,c,e,f);g||(a.position+=b);\nreturn b},write:(a,b,c,e,f,g)=>{if(0>e||0>f)throw new y.ErrnoError(28);if(y.bb(a))throw new y.ErrnoError(8);if(0===(a.flags&2097155))throw new y.ErrnoError(8);if(y.isDir(a.node.mode))throw new y.ErrnoError(31);if(!a.stream_ops.write)throw new y.ErrnoError(28);a.seekable&&a.flags&1024&&y.llseek(a,0,2);var k=\"undefined\"!=typeof f;if(!k)f=a.position;else if(!a.seekable)throw new y.ErrnoError(70);b=a.stream_ops.write(a,b,c,e,f,g);k||(a.position+=b);return b},allocate:(a,b,c)=>{if(y.bb(a))throw new y.ErrnoError(8);\nif(0>b||0>=c)throw new y.ErrnoError(28);if(0===(a.flags&2097155))throw new y.ErrnoError(8);if(!y.isFile(a.node.mode)&&!y.isDir(a.node.mode))throw new y.ErrnoError(43);if(!a.stream_ops.allocate)throw new y.ErrnoError(138);a.stream_ops.allocate(a,b,c)},mmap:(a,b,c,e,f,g)=>{if(0!==(f&2)&&0===(g&2)&&2!==(a.flags&2097155))throw new y.ErrnoError(2);if(1===(a.flags&2097155))throw new y.ErrnoError(2);if(!a.stream_ops.mmap)throw new y.ErrnoError(43);return a.stream_ops.mmap(a,b,c,e,f,g)},msync:(a,b,c,e,f)=>\na&&a.stream_ops.msync?a.stream_ops.msync(a,b,c,e,f):0,jd:()=>0,cc:(a,b,c)=>{if(!a.stream_ops.cc)throw new y.ErrnoError(59);return a.stream_ops.cc(a,b,c)},readFile:(a,b={})=>{b.flags=b.flags||0;b.encoding=b.encoding||\"binary\";if(\"utf8\"!==b.encoding&&\"binary\"!==b.encoding)throw Error('Invalid encoding type \"'+b.encoding+'\"');var c,e=y.open(a,b.flags);a=y.stat(a).size;var f=new Uint8Array(a);y.read(e,f,0,a,0);\"utf8\"===b.encoding?c=La(f,0):\"binary\"===b.encoding&&(c=f);y.close(e);return c},writeFile:(a,\nb,c={})=>{c.flags=c.flags||577;a=y.open(a,c.flags,c.mode);if(\"string\"==typeof b){var e=new Uint8Array(d(b)+1);b=p(b,e,0,e.length);y.write(a,e,0,b,void 0,c.sc)}else if(ArrayBuffer.isView(b))y.write(a,b,0,b.byteLength,void 0,c.sc);else throw Error(\"Unsupported data type\");y.close(a)},cwd:()=>y.Qb,chdir:a=>{a=y.lookupPath(a,{Ma:!0});if(null===a.node)throw new y.ErrnoError(44);if(!y.isDir(a.node.mode))throw new y.ErrnoError(54);var b=y.Ta(a.node,\"x\");if(b)throw new y.ErrnoError(b);y.Qb=a.path},wc:()=>\n{y.mkdir(\"/tmp\");y.mkdir(\"/home\");y.mkdir(\"/home/web_user\")},vc:()=>{y.mkdir(\"/dev\");y.Ib(y.Va(1,3),{read:()=>0,write:(b,c,e,f)=>f});y.kb(\"/dev/null\",y.Va(1,3));ob(y.Va(5,0),qb);ob(y.Va(6,0),rb);y.kb(\"/dev/tty\",y.Va(5,0));y.kb(\"/dev/tty1\",y.Va(6,0));var a=kb();y.Pa(\"/dev\",\"random\",a);y.Pa(\"/dev\",\"urandom\",a);y.mkdir(\"/dev/shm\");y.mkdir(\"/dev/shm/tmp\")},yc:()=>{y.mkdir(\"/proc\");var a=y.mkdir(\"/proc/self\");y.mkdir(\"/proc/self/fd\");y.mount({mount:()=>{var b=y.createNode(a,\"fd\",16895,73);b.node_ops={lookup:(c,\ne)=>{var f=y.Sa(+e);if(!f)throw new y.ErrnoError(8);c={parent:null,mount:{dc:\"fake\"},node_ops:{readlink:()=>f.path}};return c.parent=c}};return b}},{},\"/proc/self/fd\")},zc:()=>{Module.stdin?y.Pa(\"/dev\",\"stdin\",Module.stdin):y.symlink(\"/dev/tty\",\"/dev/stdin\");Module.stdout?y.Pa(\"/dev\",\"stdout\",null,Module.stdout):y.symlink(\"/dev/tty\",\"/dev/stdout\");Module.stderr?y.Pa(\"/dev\",\"stderr\",null,Module.stderr):y.symlink(\"/dev/tty1\",\"/dev/stderr\");y.open(\"/dev/stdin\",0);y.open(\"/dev/stdout\",1);y.open(\"/dev/stderr\",\n1)},Sb:()=>{y.ErrnoError||(y.ErrnoError=function(a,b){this.node=b;this.Vc=function(c){this.Ia=c};this.Vc(a);this.message=\"FS error\"},y.ErrnoError.prototype=Error(),y.ErrnoError.prototype.constructor=y.ErrnoError,[44].forEach(a=>{y.vb[a]=new y.ErrnoError(a);y.vb[a].stack=\"<generic error, no stack>\"}))},ec:()=>{y.Sb();y.Na=Array(4096);y.mount(W,{},\"/\");y.wc();y.vc();y.yc();y.Cc={MEMFS:W}},hb:(a,b,c)=>{y.hb.zb=!0;y.Sb();Module.stdin=a||Module.stdin;Module.stdout=b||Module.stdout;Module.stderr=c||Module.stderr;\ny.zc()},ld:()=>{y.hb.zb=!1;for(var a=0;a<y.streams.length;a++){var b=y.streams[a];b&&y.close(b)}},wb:(a,b)=>{var c=0;a&&(c|=365);b&&(c|=146);return c},ad:(a,b)=>{a=y.pb(a,b);return a.exists?a.object:null},pb:(a,b)=>{try{var c=y.lookupPath(a,{Ma:!b});a=c.path}catch(f){}var e={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,Qc:!1,Sc:null,Rc:null};try{c=y.lookupPath(a,{parent:!0}),e.Qc=!0,e.Sc=c.path,e.Rc=c.node,e.name=V(a),c=y.lookupPath(a,{Ma:!b}),e.exists=!0,e.path=c.path,e.object=c.node,\ne.name=c.node.name,e.isRoot=\"/\"===c.path}catch(f){e.error=f.Ia}return e},Zc:(a,b)=>{a=\"string\"==typeof a?a:y.Ra(a);for(b=b.split(\"/\").reverse();b.length;){var c=b.pop();if(c){var e=jb(a,c);try{y.mkdir(e)}catch(f){}a=e}}return e},xc:(a,b,c,e,f)=>{a=jb(\"string\"==typeof a?a:y.Ra(a),b);return y.create(a,y.wb(e,f))},rb:(a,b,c,e,f,g)=>{var k=b;a&&(a=\"string\"==typeof a?a:y.Ra(a),k=b?jb(a,b):a);a=y.wb(e,f);k=y.create(k,a);if(c){if(\"string\"==typeof c){b=Array(c.length);e=0;for(f=c.length;e<f;++e)b[e]=c.charCodeAt(e);\nc=b}y.chmod(k,a|146);b=y.open(k,577);y.write(b,c,0,c.length,0,g);y.close(b);y.chmod(k,a)}return k},Pa:(a,b,c,e)=>{a=jb(\"string\"==typeof a?a:y.Ra(a),b);b=y.wb(!!c,!!e);y.Pa.Cb||(y.Pa.Cb=64);var f=y.Va(y.Pa.Cb++,0);y.Ib(f,{open:g=>{g.seekable=!1},close:()=>{e&&e.buffer&&e.buffer.length&&e(10)},read:(g,k,l,q)=>{for(var n=0,r=0;r<q;r++){try{var x=c()}catch(z){throw new y.ErrnoError(29);}if(void 0===x&&0===n)throw new y.ErrnoError(6);if(null===x||void 0===x)break;n++;k[l+r]=x}n&&(g.node.timestamp=Date.now());\nreturn n},write:(g,k,l,q)=>{for(var n=0;n<q;n++)try{e(k[l+n])}catch(r){throw new y.ErrnoError(29);}q&&(g.node.timestamp=Date.now());return n}});return y.kb(a,b,f)},Vb:a=>{if(a.Ab||a.Jc||a.link||a.Ha)return!0;if(\"undefined\"!=typeof XMLHttpRequest)throw Error(\"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.\");if(ra)try{a.Ha=ba(ra(a.url),!0),a.La=a.Ha.length}catch(b){throw new y.ErrnoError(29);\n}else throw Error(\"Cannot load without read() or XMLHttpRequest.\");},Yc:(a,b,c,e,f)=>{function g(){this.Bb=!1;this.gb=[]}g.prototype.get=function(n){if(!(n>this.length-1||0>n)){var r=n%this.chunkSize;return this.Zb(n/this.chunkSize|0)[r]}};g.prototype.hc=function(n){this.Zb=n};g.prototype.Ob=function(){var n=new XMLHttpRequest;n.open(\"HEAD\",c,!1);n.send(null);if(!(200<=n.status&&300>n.status||304===n.status))throw Error(\"Couldn't load \"+c+\". Status: \"+n.status);var r=Number(n.getResponseHeader(\"Content-length\")),\nx,z=(x=n.getResponseHeader(\"Accept-Ranges\"))&&\"bytes\"===x;n=(x=n.getResponseHeader(\"Content-Encoding\"))&&\"gzip\"===x;var D=1048576;z||(D=r);var A=this;A.hc(S=>{var Y=S*D,T=(S+1)*D-1;T=Math.min(T,r-1);if(\"undefined\"==typeof A.gb[S]){var Ia=A.gb;if(Y>T)throw Error(\"invalid range (\"+Y+\", \"+T+\") or no bytes requested!\");if(T>r-1)throw Error(\"only \"+r+\" bytes available! programmer error!\");var E=new XMLHttpRequest;E.open(\"GET\",c,!1);r!==D&&E.setRequestHeader(\"Range\",\"bytes=\"+Y+\"-\"+T);E.responseType=\"arraybuffer\";\nE.overrideMimeType&&E.overrideMimeType(\"text/plain; charset=x-user-defined\");E.send(null);if(!(200<=E.status&&300>E.status||304===E.status))throw Error(\"Couldn't load \"+c+\". Status: \"+E.status);Y=void 0!==E.response?new Uint8Array(E.response||[]):ba(E.responseText||\"\",!0);Ia[S]=Y}if(\"undefined\"==typeof A.gb[S])throw Error(\"doXHR failed!\");return A.gb[S]});if(n||!r)D=r=1,D=r=this.Zb(0).length,xa(\"LazyFiles on gzip forces download of the whole file when length is accessed\");this.kc=r;this.jc=D;this.Bb=\n!0};if(\"undefined\"!=typeof XMLHttpRequest){if(!pa)throw\"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc\";var k=new g;Object.defineProperties(k,{length:{get:function(){this.Bb||this.Ob();return this.kc}},chunkSize:{get:function(){this.Bb||this.Ob();return this.jc}}});k={Ab:!1,Ha:k}}else k={Ab:!1,url:c};var l=y.xc(a,b,k,e,f);k.Ha?l.Ha=k.Ha:k.url&&(l.Ha=null,l.url=k.url);Object.defineProperties(l,{La:{get:function(){return this.Ha.length}}});\nvar q={};Object.keys(l.stream_ops).forEach(n=>{var r=l.stream_ops[n];q[n]=function(){y.Vb(l);return r.apply(null,arguments)}});q.read=(n,r,x,z,D)=>{y.Vb(l);n=n.node.Ha;if(D>=n.length)return 0;z=Math.min(n.length-D,z);if(n.slice)for(var A=0;A<z;A++)r[x+A]=n[D+A];else for(A=0;A<z;A++)r[x+A]=n.get(D+A);return z};l.stream_ops=q;return l},$c:(a,b,c,e,f,g,k,l,q,n)=>{function r(z){function D(A){n&&n();l||y.rb(a,b,A,e,f,q);g&&g();Xa()}ub.dd(z,x,D,()=>{k&&k();Xa()})||D(z)}var x=b?lb(jb(a,b)):a;Wa();\"string\"==\ntypeof c?tb(c,z=>r(z),k):r(c)},indexedDB:()=>window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,Jb:()=>\"EM_FS_\"+window.location.pathname,Kb:20,ab:\"FILE_DATA\",md:(a,b,c)=>{b=b||(()=>{});c=c||(()=>{});var e=y.indexedDB();try{var f=e.open(y.Jb(),y.Kb)}catch(g){return c(g)}f.onupgradeneeded=()=>{xa(\"creating db\");f.result.createObjectStore(y.ab)};f.onsuccess=()=>{var g=f.result.transaction([y.ab],\"readwrite\"),k=g.objectStore(y.ab),l=0,q=0,n=a.length;a.forEach(r=>{r=k.put(y.pb(r).object.Ha,\nr);r.onsuccess=()=>{l++;l+q==n&&(0==q?b():c())};r.onerror=()=>{q++;l+q==n&&(0==q?b():c())}});g.onerror=c};f.onerror=c},ed:(a,b,c)=>{b=b||(()=>{});c=c||(()=>{});var e=y.indexedDB();try{var f=e.open(y.Jb(),y.Kb)}catch(g){return c(g)}f.onupgradeneeded=c;f.onsuccess=()=>{var g=f.result;try{var k=g.transaction([y.ab],\"readonly\")}catch(x){c(x);return}var l=k.objectStore(y.ab),q=0,n=0,r=a.length;a.forEach(x=>{var z=l.get(x);z.onsuccess=()=>{y.pb(x).exists&&y.unlink(x);y.rb(ib(x),V(x),z.result,!0,!0,!0);\nq++;q+n==r&&(0==n?b():c())};z.onerror=()=>{n++;q+n==r&&(0==n?b():c())}});k.onerror=c};f.onerror=c}};function vb(a,b,c){if(\"/\"===b[0])return b;if(-100===a)a=y.cwd();else{a=y.Sa(a);if(!a)throw new y.ErrnoError(8);a=a.path}if(0==b.length){if(!c)throw new y.ErrnoError(44);return a}return jb(a,b)}\nfunction wb(a,b,c){try{var e=a(b)}catch(f){if(f&&f.node&&hb(b)!==hb(y.Ra(f.node)))return-54;throw f;}P[c>>2]=e.dev;P[c+4>>2]=0;P[c+8>>2]=e.ino;P[c+12>>2]=e.mode;P[c+16>>2]=e.nlink;P[c+20>>2]=e.uid;P[c+24>>2]=e.gid;P[c+28>>2]=e.rdev;P[c+32>>2]=0;Q=[e.size>>>0,(R=e.size,1<=+Math.abs(R)?0<R?(Math.min(+Math.floor(R/4294967296),4294967295)|0)>>>0:~~+Math.ceil((R-+(~~R>>>0))/4294967296)>>>0:0)];P[c+40>>2]=Q[0];P[c+44>>2]=Q[1];P[c+48>>2]=4096;P[c+52>>2]=e.blocks;P[c+56>>2]=e.atime.getTime()/1E3|0;P[c+60>>\n2]=0;P[c+64>>2]=e.mtime.getTime()/1E3|0;P[c+68>>2]=0;P[c+72>>2]=e.ctime.getTime()/1E3|0;P[c+76>>2]=0;Q=[e.ino>>>0,(R=e.ino,1<=+Math.abs(R)?0<R?(Math.min(+Math.floor(R/4294967296),4294967295)|0)>>>0:~~+Math.ceil((R-+(~~R>>>0))/4294967296)>>>0:0)];P[c+80>>2]=Q[0];P[c+84>>2]=Q[1];return 0}var Tb=void 0;function Ub(){Tb+=4;return P[Tb-4>>2]}function X(a){a=y.Sa(a);if(!a)throw new y.ErrnoError(8);return a}\nfunction Vb(a,b,c){function e(q){return(q=q.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?q[1]:\"GMT\"}var f=(new Date).getFullYear(),g=new Date(f,0,1),k=new Date(f,6,1);f=g.getTimezoneOffset();var l=k.getTimezoneOffset();P[a>>2]=60*Math.max(f,l);P[b>>2]=Number(f!=l);a=e(g);b=e(k);a=Ma(a);b=Ma(b);l<f?(P[c>>2]=a,P[c+4>>2]=b):(P[c>>2]=b,P[c+4>>2]=a)}function Wb(a,b,c){Wb.rc||(Wb.rc=!0,Vb(a,b,c))}var Xb;Xb=qa?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now();var Yb={};\nfunction Zb(){if(!$b){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ma||\"./this.program\"},b;for(b in Yb)void 0===Yb[b]?delete a[b]:a[b]=Yb[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);$b=c}return $b}var $b;\nfunction ac(a,b,c,e){a||(a=this);this.parent=a;this.mount=a.mount;this.cb=null;this.id=y.Oc++;this.name=b;this.mode=c;this.node_ops={};this.stream_ops={};this.rdev=e}Object.defineProperties(ac.prototype,{read:{get:function(){return 365===(this.mode&365)},set:function(a){a?this.mode|=365:this.mode&=-366}},write:{get:function(){return 146===(this.mode&146)},set:function(a){a?this.mode|=146:this.mode&=-147}},Jc:{get:function(){return y.isDir(this.mode)}},Ab:{get:function(){return y.ib(this.mode)}}});\ny.FSNode=ac;y.ec();var ub;function ba(a,b){var c=Array(d(a)+1);a=p(a,c,0,c.length);b&&(c.length=a);return c}\nvar cc={a:function(a,b,c,e){O(\"Assertion failed: \"+J(a)+\", at: \"+[b?J(b):\"unknown filename\",c,e?J(e):\"unknown function\"])},h:function(a,b){try{return a=J(a),y.chmod(a,b),0}catch(c){if(\"undefined\"==typeof y||!(c instanceof y.ErrnoError))throw c;return-c.Ia}},H:function(a,b,c){try{b=J(b);b=vb(a,b);if(c&-8)var e=-28;else{var f=y.lookupPath(b,{Ma:!0}).node;f?(a=\"\",c&4&&(a+=\"r\"),c&2&&(a+=\"w\"),c&1&&(a+=\"x\"),e=a&&y.Ta(f,a)?-2:0):e=-44}return e}catch(g){if(\"undefined\"==typeof y||!(g instanceof y.ErrnoError))throw g;\nreturn-g.Ia}},i:function(a,b){try{return y.fchmod(a,b),0}catch(c){if(\"undefined\"==typeof y||!(c instanceof y.ErrnoError))throw c;return-c.Ia}},g:function(a,b,c){try{return y.fchown(a,b,c),0}catch(e){if(\"undefined\"==typeof y||!(e instanceof y.ErrnoError))throw e;return-e.Ia}},b:function(a,b,c){Tb=c;try{var e=X(a);switch(b){case 0:var f=Ub();return 0>f?-28:y.open(e.path,e.flags,0,f).fd;case 1:case 2:return 0;case 3:return e.flags;case 4:return f=Ub(),e.flags|=f,0;case 5:return f=Ub(),Ba[f+0>>1]=2,0;\ncase 6:case 7:return 0;case 16:case 8:return-28;case 9:return P[bc()>>2]=28,-1;default:return-28}}catch(g){if(\"undefined\"==typeof y||!(g instanceof y.ErrnoError))throw g;return-g.Ia}},G:function(a,b){try{var c=X(a);return wb(y.stat,c.path,b)}catch(e){if(\"undefined\"==typeof y||!(e instanceof y.ErrnoError))throw e;return-e.Ia}},B:function(a,b){try{return y.Ec(a,b),0}catch(c){if(\"undefined\"==typeof y||!(c instanceof y.ErrnoError))throw c;return-c.Ia}},A:function(a,b){try{if(0===b)return-28;var c=y.cwd();\nif(b<d(c)+1)return-68;p(c,t,a,b);return a}catch(e){if(\"undefined\"==typeof y||!(e instanceof y.ErrnoError))throw e;return-e.Ia}},E:function(a,b){try{return a=J(a),wb(y.lstat,a,b)}catch(c){if(\"undefined\"==typeof y||!(c instanceof y.ErrnoError))throw c;return-c.Ia}},x:function(a,b){try{return a=J(a),a=hb(a),\"/\"===a[a.length-1]&&(a=a.substr(0,a.length-1)),y.mkdir(a,b,0),0}catch(c){if(\"undefined\"==typeof y||!(c instanceof y.ErrnoError))throw c;return-c.Ia}},D:function(a,b,c,e){try{b=J(b);var f=e&256;b=\nvb(a,b,e&4096);return wb(f?y.lstat:y.stat,b,c)}catch(g){if(\"undefined\"==typeof y||!(g instanceof y.ErrnoError))throw g;return-g.Ia}},u:function(a,b,c,e){Tb=e;try{b=J(b);b=vb(a,b);var f=e?Ub():0;return y.open(b,c,f).fd}catch(g){if(\"undefined\"==typeof y||!(g instanceof y.ErrnoError))throw g;return-g.Ia}},s:function(a,b,c,e){try{b=J(b);b=vb(a,b);if(0>=e)var f=-28;else{var g=y.readlink(b),k=Math.min(e,d(g)),l=I[c+k];p(g,t,c,e+1);I[c+k]=l;f=k}return f}catch(q){if(\"undefined\"==typeof y||!(q instanceof y.ErrnoError))throw q;\nreturn-q.Ia}},r:function(a){try{return a=J(a),y.rmdir(a),0}catch(b){if(\"undefined\"==typeof y||!(b instanceof y.ErrnoError))throw b;return-b.Ia}},F:function(a,b){try{return a=J(a),wb(y.stat,a,b)}catch(c){if(\"undefined\"==typeof y||!(c instanceof y.ErrnoError))throw c;return-c.Ia}},o:function(a,b,c){try{return b=J(b),b=vb(a,b),0===c?y.unlink(b):512===c?y.rmdir(b):O(\"Invalid flags passed to unlinkat\"),0}catch(e){if(\"undefined\"==typeof y||!(e instanceof y.ErrnoError))throw e;return-e.Ia}},m:function(a,\nb,c){try{b=J(b);b=vb(a,b,!0);if(c){var e=P[c>>2],f=P[c+4>>2];g=1E3*e+f/1E6;c+=8;e=P[c>>2];f=P[c+4>>2];k=1E3*e+f/1E6}else var g=Date.now(),k=g;y.Xc(b,g,k);return 0}catch(l){if(\"undefined\"==typeof y||!(l instanceof y.ErrnoError))throw l;return-l.Ia}},e:function(){return Date.now()},j:function(a,b){a=new Date(1E3*P[a>>2]);P[b>>2]=a.getSeconds();P[b+4>>2]=a.getMinutes();P[b+8>>2]=a.getHours();P[b+12>>2]=a.getDate();P[b+16>>2]=a.getMonth();P[b+20>>2]=a.getFullYear()-1900;P[b+24>>2]=a.getDay();var c=new Date(a.getFullYear(),\n0,1);P[b+28>>2]=(a.getTime()-c.getTime())/864E5|0;P[b+36>>2]=-(60*a.getTimezoneOffset());var e=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();c=c.getTimezoneOffset();P[b+32>>2]=(e!=c&&a.getTimezoneOffset()==Math.min(c,e))|0},v:function(a,b,c,e,f,g,k){try{var l=y.Sa(f);if(!l)return-8;var q=y.mmap(l,a,b,g,c,e),n=q.Tc;P[k>>2]=q.lc;return n}catch(r){if(\"undefined\"==typeof y||!(r instanceof y.ErrnoError))throw r;return-r.Ia}},w:function(a,b,c,e,f,g){try{var k=y.Sa(f);if(k&&c&2){var l=t.slice(a,a+\nb);y.msync(k,l,g,b,e)}}catch(q){if(\"undefined\"==typeof y||!(q instanceof y.ErrnoError))throw q;return-q.Ia}},n:Wb,p:function(){return 2147483648},d:Xb,c:function(a){var b=t.length;a>>>=0;if(2147483648<a)return!1;for(var c=1;4>=c;c*=2){var e=b*(1+.2/c);e=Math.min(e,a+100663296);var f=Math;e=Math.max(a,e);f=f.min.call(f,2147483648,e+(65536-e%65536)%65536);a:{try{Ea.grow(f-Na.byteLength+65535>>>16);Oa();var g=1;break a}catch(k){}g=void 0}if(g)return!0}return!1},y:function(a,b){var c=0;Zb().forEach(function(e,\nf){var g=b+c;f=P[a+4*f>>2]=g;for(g=0;g<e.length;++g)I[f++>>0]=e.charCodeAt(g);I[f>>0]=0;c+=e.length+1});return 0},z:function(a,b){var c=Zb();P[a>>2]=c.length;var e=0;c.forEach(function(f){e+=f.length+1});P[b>>2]=e;return 0},f:function(a){try{var b=X(a);y.close(b);return 0}catch(c){if(\"undefined\"==typeof y||!(c instanceof y.ErrnoError))throw c;return c.Ia}},l:function(a,b){try{var c=X(a),e=c.tty?2:y.isDir(c.mode)?3:y.Ya(c.mode)?7:4;I[b>>0]=e;return 0}catch(f){if(\"undefined\"==typeof y||!(f instanceof\ny.ErrnoError))throw f;return f.Ia}},t:function(a,b,c,e){try{a:{for(var f=X(a),g=a=0;g<c;g++){var k=P[b+(8*g+4)>>2],l=y.read(f,I,P[b+8*g>>2],k,void 0);if(0>l){var q=-1;break a}a+=l;if(l<k)break}q=a}P[e>>2]=q;return 0}catch(n){if(\"undefined\"==typeof y||!(n instanceof y.ErrnoError))throw n;return n.Ia}},k:function(a,b,c,e,f){try{var g=X(a);a=4294967296*c+(b>>>0);if(-9007199254740992>=a||9007199254740992<=a)return-61;y.llseek(g,a,e);Q=[g.position>>>0,(R=g.position,1<=+Math.abs(R)?0<R?(Math.min(+Math.floor(R/\n4294967296),4294967295)|0)>>>0:~~+Math.ceil((R-+(~~R>>>0))/4294967296)>>>0:0)];P[f>>2]=Q[0];P[f+4>>2]=Q[1];g.xb&&0===a&&0===e&&(g.xb=null);return 0}catch(k){if(\"undefined\"==typeof y||!(k instanceof y.ErrnoError))throw k;return k.Ia}},C:function(a){try{var b=X(a);return b.stream_ops&&b.stream_ops.fsync?-b.stream_ops.fsync(b):0}catch(c){if(\"undefined\"==typeof y||!(c instanceof y.ErrnoError))throw c;return c.Ia}},q:function(a,b,c,e){try{a:{for(var f=X(a),g=a=0;g<c;g++){var k=y.write(f,I,P[b+8*g>>2],\nP[b+(8*g+4)>>2],void 0);if(0>k){var l=-1;break a}a+=k}l=a}P[e>>2]=l;return 0}catch(q){if(\"undefined\"==typeof y||!(q instanceof y.ErrnoError))throw q;return q.Ia}}};\n(function(){function a(f){Module.asm=f.exports;Ea=Module.asm.I;Oa();N=Module.asm.Aa;Qa.unshift(Module.asm.J);Xa()}function b(f){a(f.instance)}function c(f){return eb().then(function(g){return WebAssembly.instantiate(g,e)}).then(function(g){return g}).then(f,function(g){M(\"failed to asynchronously prepare wasm: \"+g);O(g)})}var e={a:cc};Wa();if(Module.instantiateWasm)try{return Module.instantiateWasm(e,a)}catch(f){return M(\"Module.instantiateWasm callback failed with error: \"+f),!1}(function(){return Aa||\n\"function\"!=typeof WebAssembly.instantiateStreaming||Ya()||U.startsWith(\"file://\")||\"function\"!=typeof fetch?c(b):fetch(U,{credentials:\"same-origin\"}).then(function(f){return WebAssembly.instantiateStreaming(f,e).then(b,function(g){M(\"wasm streaming compile failed: \"+g);M(\"falling back to ArrayBuffer instantiation\");return c(b)})})})();return{}})();Module.___wasm_call_ctors=function(){return(Module.___wasm_call_ctors=Module.asm.J).apply(null,arguments)};\nModule._sqlite3_vfs_find=function(){return(Module._sqlite3_vfs_find=Module.asm.K).apply(null,arguments)};Module._sqlite3_free=function(){return(Module._sqlite3_free=Module.asm.L).apply(null,arguments)};Module._sqlite3_value_double=function(){return(Module._sqlite3_value_double=Module.asm.M).apply(null,arguments)};Module._sqlite3_value_text=function(){return(Module._sqlite3_value_text=Module.asm.N).apply(null,arguments)};\nvar bc=Module.___errno_location=function(){return(bc=Module.___errno_location=Module.asm.O).apply(null,arguments)};Module._sqlite3_prepare_v2=function(){return(Module._sqlite3_prepare_v2=Module.asm.P).apply(null,arguments)};Module._sqlite3_step=function(){return(Module._sqlite3_step=Module.asm.Q).apply(null,arguments)};Module._sqlite3_finalize=function(){return(Module._sqlite3_finalize=Module.asm.R).apply(null,arguments)};\nModule._sqlite3_reset=function(){return(Module._sqlite3_reset=Module.asm.S).apply(null,arguments)};Module._sqlite3_value_int=function(){return(Module._sqlite3_value_int=Module.asm.T).apply(null,arguments)};Module._sqlite3_clear_bindings=function(){return(Module._sqlite3_clear_bindings=Module.asm.U).apply(null,arguments)};Module._sqlite3_value_blob=function(){return(Module._sqlite3_value_blob=Module.asm.V).apply(null,arguments)};\nModule._sqlite3_value_bytes=function(){return(Module._sqlite3_value_bytes=Module.asm.W).apply(null,arguments)};Module._sqlite3_value_type=function(){return(Module._sqlite3_value_type=Module.asm.X).apply(null,arguments)};Module._sqlite3_result_blob=function(){return(Module._sqlite3_result_blob=Module.asm.Y).apply(null,arguments)};Module._sqlite3_result_double=function(){return(Module._sqlite3_result_double=Module.asm.Z).apply(null,arguments)};\nModule._sqlite3_result_error=function(){return(Module._sqlite3_result_error=Module.asm._).apply(null,arguments)};Module._sqlite3_result_int=function(){return(Module._sqlite3_result_int=Module.asm.$).apply(null,arguments)};Module._sqlite3_result_int64=function(){return(Module._sqlite3_result_int64=Module.asm.aa).apply(null,arguments)};Module._sqlite3_result_null=function(){return(Module._sqlite3_result_null=Module.asm.ba).apply(null,arguments)};\nModule._sqlite3_result_text=function(){return(Module._sqlite3_result_text=Module.asm.ca).apply(null,arguments)};Module._sqlite3_sql=function(){return(Module._sqlite3_sql=Module.asm.da).apply(null,arguments)};Module._sqlite3_column_count=function(){return(Module._sqlite3_column_count=Module.asm.ea).apply(null,arguments)};Module._sqlite3_data_count=function(){return(Module._sqlite3_data_count=Module.asm.fa).apply(null,arguments)};\nModule._sqlite3_column_blob=function(){return(Module._sqlite3_column_blob=Module.asm.ga).apply(null,arguments)};Module._sqlite3_column_bytes=function(){return(Module._sqlite3_column_bytes=Module.asm.ha).apply(null,arguments)};Module._sqlite3_column_double=function(){return(Module._sqlite3_column_double=Module.asm.ia).apply(null,arguments)};Module._sqlite3_column_text=function(){return(Module._sqlite3_column_text=Module.asm.ja).apply(null,arguments)};\nModule._sqlite3_column_type=function(){return(Module._sqlite3_column_type=Module.asm.ka).apply(null,arguments)};Module._sqlite3_column_name=function(){return(Module._sqlite3_column_name=Module.asm.la).apply(null,arguments)};Module._sqlite3_bind_blob=function(){return(Module._sqlite3_bind_blob=Module.asm.ma).apply(null,arguments)};Module._sqlite3_bind_double=function(){return(Module._sqlite3_bind_double=Module.asm.na).apply(null,arguments)};\nModule._sqlite3_bind_int=function(){return(Module._sqlite3_bind_int=Module.asm.oa).apply(null,arguments)};Module._sqlite3_bind_text=function(){return(Module._sqlite3_bind_text=Module.asm.pa).apply(null,arguments)};Module._sqlite3_bind_parameter_index=function(){return(Module._sqlite3_bind_parameter_index=Module.asm.qa).apply(null,arguments)};Module._sqlite3_normalized_sql=function(){return(Module._sqlite3_normalized_sql=Module.asm.ra).apply(null,arguments)};\nModule._sqlite3_errmsg=function(){return(Module._sqlite3_errmsg=Module.asm.sa).apply(null,arguments)};Module._sqlite3_exec=function(){return(Module._sqlite3_exec=Module.asm.ta).apply(null,arguments)};Module._sqlite3_changes=function(){return(Module._sqlite3_changes=Module.asm.ua).apply(null,arguments)};Module._sqlite3_close_v2=function(){return(Module._sqlite3_close_v2=Module.asm.va).apply(null,arguments)};\nModule._sqlite3_create_function_v2=function(){return(Module._sqlite3_create_function_v2=Module.asm.wa).apply(null,arguments)};Module._sqlite3_open=function(){return(Module._sqlite3_open=Module.asm.xa).apply(null,arguments)};var aa=Module._malloc=function(){return(aa=Module._malloc=Module.asm.ya).apply(null,arguments)},da=Module._free=function(){return(da=Module._free=Module.asm.za).apply(null,arguments)};\nModule._RegisterExtensionFunctions=function(){return(Module._RegisterExtensionFunctions=Module.asm.Ba).apply(null,arguments)};Module._register_for_idb=function(){return(Module._register_for_idb=Module.asm.Ca).apply(null,arguments)};\nvar sb=Module._emscripten_builtin_memalign=function(){return(sb=Module._emscripten_builtin_memalign=Module.asm.Da).apply(null,arguments)},fa=Module.stackSave=function(){return(fa=Module.stackSave=Module.asm.Ea).apply(null,arguments)},ia=Module.stackRestore=function(){return(ia=Module.stackRestore=Module.asm.Fa).apply(null,arguments)},C=Module.stackAlloc=function(){return(C=Module.stackAlloc=Module.asm.Ga).apply(null,arguments)};\nModule.cwrap=function(a,b,c,e){c=c||[];var f=c.every(function(g){return\"number\"===g});return\"string\"!==b&&f&&!e?Module[\"_\"+a]:function(){return Ga(a,b,c,arguments)}};Module.UTF8ToString=J;Module.FS=y;Module.stackSave=fa;Module.stackRestore=ia;Module.stackAlloc=C;var dc;Va=function ec(){dc||fc();dc||(Va=ec)};\nfunction fc(){function a(){if(!dc&&(dc=!0,Module.calledRun=!0,!Fa)){Module.noFSInit||y.hb.zb||y.hb();y.bc=!1;fb(Qa);if(Module.onRuntimeInitialized)Module.onRuntimeInitialized();if(Module.postRun)for(\"function\"==typeof Module.postRun&&(Module.postRun=[Module.postRun]);Module.postRun.length;){var b=Module.postRun.shift();Ra.unshift(b)}fb(Ra)}}if(!(0<Ta)){if(Module.preRun)for(\"function\"==typeof Module.preRun&&(Module.preRun=[Module.preRun]);Module.preRun.length;)Sa();fb(Pa);0<Ta||(Module.setStatus?(Module.setStatus(\"Running...\"),\nsetTimeout(function(){setTimeout(function(){Module.setStatus(\"\")},1);a()},1)):a())}}Module.run=fc;if(Module.preInit)for(\"function\"==typeof Module.preInit&&(Module.preInit=[Module.preInit]);0<Module.preInit.length;)Module.preInit.pop()();fc();\n\n\n        // The shell-pre.js and emcc-generated code goes above\n        return Module;\n    }); // The end of the promise being returned\n\n  return initSqlJsPromise;\n} // The end of our initSqlJs function\n\n// This bit below is copied almost exactly from what you get when you use the MODULARIZE=1 flag with emcc\n// However, we don't want to use the emcc modularization. See shell-pre.js\nif (true){\n    module.exports = initSqlJs;\n    // This will allow the module to be used in ES6 or CommonJS\n    module.exports[\"default\"] = initSqlJs;\n}\nelse {}\n\n\n//# sourceURL=webpack://@aphro/todo-mvc/../../node_modules/.pnpm/@aphro+sql.js@1.7.0/node_modules/@aphro/sql.js/dist/sql-wasm.js?");

/***/ })

}]);